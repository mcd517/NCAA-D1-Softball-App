diff --git a/Pods/fmt/include/fmt/core.h b/Pods/fmt/include/fmt/core.h
index 1234567..7654321 100644
--- a/Pods/fmt/include/fmt/core.h
+++ b/Pods/fmt/include/fmt/core.h
@@ -246,24 +246,30 @@
 
 FMT_BEGIN_NAMESPACE
 
+#ifndef FMT_TEMPLATE_DEFS_ALREADY_DEFINED
+#define FMT_TEMPLATE_DEFS_ALREADY_DEFINED
 // Implementations of enable_if_t and other metafunctions for older systems.
 template <bool B, class T = void>
-using enable_if_t = typename std::enable_if<B, T>::type;
+using enable_if_t = typename ::std::enable_if<B, T>::type;
 
 template <bool B, class T, class F>
-using conditional_t = typename std::conditional<B, T, F>::type;
+using conditional_t = typename ::std::conditional<B, T, F>::type;
 
-template <bool B> using bool_constant = std::integral_constant<bool, B>;
+template <bool B> using bool_constant = ::std::integral_constant<bool, B>;
 
 template <typename T>
-using remove_reference_t = typename std::remove_reference<T>::type;
+using remove_reference_t = typename ::std::remove_reference<T>::type;
 
 template <typename T>
-using remove_const_t = typename std::remove_const<T>::type;
+using remove_const_t = typename ::std::remove_const<T>::type;
 
 template <typename T>
-using remove_cvref_t = typename std::remove_cv<remove_reference_t<T>>::type;
+using remove_cvref_t = typename ::std::remove_cv<remove_reference_t<T>>::type;
 
 template <typename T> struct type_identity { using type = T; };
 template <typename T> using type_identity_t = typename type_identity<T>::type;
+#endif
+
+#define STD ::std
 
 struct monostate {};
@@ -295,7 +301,7 @@ FMT_NORETURN FMT_API void assert_fail(const char* file, int line,
 #define FMT_ASSERT(condition, message) assert((condition) && message)
 #endif
 
-template <typename Char> using std_string_view = std::basic_string_view<Char>;
+template <typename Char> using std_string_view = STD::basic_string_view<Char>;
 
 template <typename Container> inline typename Container::value_type const*
 get_data(const Container& c) {
@@ -495,7 +501,7 @@ struct compile_string {
 
 // Check whether S is a compile-time format string.
 template <typename S>
-struct is_compile_string : std::is_base_of<compile_string, S> {};
+struct is_compile_string : ::std::is_base_of<compile_string, S> {};
 
 template <typename S>
 constexpr bool is_compile_string_v = is_compile_string<S>::value;
@@ -510,13 +516,13 @@ template <typename S>
 struct is_compile_string<S&> : is_compile_string<S> {};
 
 template <typename S>
-struct is_string : std::is_class<decltype(to_string_view(std::declval<S>()))> {
+struct is_string : ::std::is_class<decltype(to_string_view(::std::declval<S>()))> {
 };
 
 // Returns a string view of s.
 template <typename Char, FMT_ENABLE_IF(is_string<Char*>::value)>
 inline auto to_string_view(Char* s) -> basic_string_view<Char> {
-  using result = decltype(to_string_view(std::declval<S>()));
+  using result = decltype(to_string_view(::std::declval<S>()));
   return basic_string_view<Char>(s, std::strlen(s));
 }
 
@@ -645,8 +651,8 @@ template <typename T, typename Enable = void>
 class buffer {
  private:
   T* ptr_;
-  std::size_t size_;
-  std::size_t capacity_;
+  ::std::size_t size_;
+  ::std::size_t capacity_;