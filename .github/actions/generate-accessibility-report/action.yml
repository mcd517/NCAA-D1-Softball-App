name: 'Generate Accessibility Report'
description: 'Aggregate accessibility scan results into comprehensive reports'
inputs:
  report-dir:
    description: 'Directory containing scan reports'
    required: false
    default: 'accessibility-reports'
  target-url:
    description: 'URL that was scanned'
    required: true
  standards:
    description: 'Accessibility standards tested'
    required: false
    default: 'WCAG 2.1 AA'
  scan-tools:
    description: 'Tools that were used for scanning'
    required: false
    default: 'axe-core,pa11y,lighthouse,playwright'
  axe-violations:
    description: 'Number of axe violations found'
    required: false
    default: '0'
  pa11y-issues:
    description: 'Number of pa11y issues found'
    required: false
    default: '0'
  lighthouse-desktop-score:
    description: 'Lighthouse desktop accessibility score'
    required: false
    default: '0'
  lighthouse-mobile-score:
    description: 'Lighthouse mobile accessibility score'
    required: false
    default: '0'
  playwright-violations:
    description: 'Number of Playwright violations found'
    required: false
    default: '0'
  workflow-run-id:
    description: 'GitHub workflow run ID'
    required: false
    default: ''
  workflow-run-number:
    description: 'GitHub workflow run number'
    required: false
    default: ''
  generate-dashboard:
    description: 'Generate HTML dashboard'
    required: false
    default: 'true'
  generate-summary:
    description: 'Generate markdown summary'
    required: false
    default: 'true'
  generate-pr-comment:
    description: 'Generate PR comment format'
    required: false
    default: 'true'

outputs:
  total-issues:
    description: 'Total number of accessibility issues found'
    value: ${{ steps.aggregate.outputs.total-issues }}
  overall-status:
    description: 'Overall scan status (passed/failed)'
    value: ${{ steps.aggregate.outputs.overall-status }}
  dashboard-path:
    description: 'Path to HTML dashboard'
    value: ${{ steps.aggregate.outputs.dashboard-path }}
  summary-path:
    description: 'Path to markdown summary'
    value: ${{ steps.aggregate.outputs.summary-path }}
  pr-comment-path:
    description: 'Path to PR comment file'
    value: ${{ steps.aggregate.outputs.pr-comment-path }}
  baseline-metadata-path:
    description: 'Path to baseline metadata'
    value: ${{ steps.aggregate.outputs.baseline-metadata-path }}

runs:
  using: 'composite'
  steps:
    - name: Aggregate scan results
      id: aggregate
      shell: bash
      run: |
        echo "Aggregating accessibility scan results..."
        
        # Create report directory if it doesn't exist
        mkdir -p ${{ inputs.report-dir }}
        
        # Calculate totals
        AXE_VIOLATIONS=${{ inputs.axe-violations }}
        PA11Y_ISSUES=${{ inputs.pa11y-issues }}
        PLAYWRIGHT_VIOLATIONS=${{ inputs.playwright-violations }}
        LIGHTHOUSE_DESKTOP_SCORE=${{ inputs.lighthouse-desktop-score }}
        LIGHTHOUSE_MOBILE_SCORE=${{ inputs.lighthouse-mobile-score }}
        
        TOTAL_ISSUES=$((AXE_VIOLATIONS + PA11Y_ISSUES + PLAYWRIGHT_VIOLATIONS))
        
        # Determine overall status
        OVERALL_STATUS="passed"
        if [ "$TOTAL_ISSUES" -gt "0" ]; then
          OVERALL_STATUS="failed"
        fi
        
        # Calculate average Lighthouse score
        if [ "$LIGHTHOUSE_DESKTOP_SCORE" != "0" ] && [ "$LIGHTHOUSE_MOBILE_SCORE" != "0" ]; then
          AVERAGE_LIGHTHOUSE_SCORE=$(echo "($LIGHTHOUSE_DESKTOP_SCORE + $LIGHTHOUSE_MOBILE_SCORE) / 2" | bc -l)
        elif [ "$LIGHTHOUSE_DESKTOP_SCORE" != "0" ]; then
          AVERAGE_LIGHTHOUSE_SCORE=$LIGHTHOUSE_DESKTOP_SCORE
        elif [ "$LIGHTHOUSE_MOBILE_SCORE" != "0" ]; then
          AVERAGE_LIGHTHOUSE_SCORE=$LIGHTHOUSE_MOBILE_SCORE
        else
          AVERAGE_LIGHTHOUSE_SCORE=0
        fi
        
        echo "=== Aggregation Summary ==="
        echo "Total Issues: $TOTAL_ISSUES"
        echo "  - Axe Violations: $AXE_VIOLATIONS"
        echo "  - Pa11y Issues: $PA11Y_ISSUES"
        echo "  - Playwright Violations: $PLAYWRIGHT_VIOLATIONS"
        echo "Average Lighthouse Score: $AVERAGE_LIGHTHOUSE_SCORE"
        echo "Overall Status: $OVERALL_STATUS"
        
        # Set outputs
        echo "total-issues=$TOTAL_ISSUES" >> $GITHUB_OUTPUT
        echo "overall-status=$OVERALL_STATUS" >> $GITHUB_OUTPUT
        
        # Store variables for next steps
        echo "TOTAL_ISSUES=$TOTAL_ISSUES" >> $GITHUB_ENV
        echo "OVERALL_STATUS=$OVERALL_STATUS" >> $GITHUB_ENV
        echo "AVERAGE_LIGHTHOUSE_SCORE=$AVERAGE_LIGHTHOUSE_SCORE" >> $GITHUB_ENV

    - name: Generate enhanced baseline metadata  
      shell: bash
      run: |
        METADATA_PATH="${{ inputs.report-dir }}/baseline-metadata.json"
        
        # Calculate business impact metrics
        CRITICAL_VIOLATIONS=${{ inputs.axe-violations }}
        HIGH_PRIORITY_ISSUES=$((PA11Y_ISSUES + PLAYWRIGHT_VIOLATIONS))
        
        # Estimate affected user percentage based on issue types
        ESTIMATED_USER_IMPACT=0
        if [ "$CRITICAL_VIOLATIONS" -gt "0" ]; then
          ESTIMATED_USER_IMPACT=25  # Critical violations affect ~25% of users with disabilities
        elif [ "$HIGH_PRIORITY_ISSUES" -gt "0" ]; then
          ESTIMATED_USER_IMPACT=15  # High priority issues affect ~15% of users
        elif [ "$TOTAL_ISSUES" -gt "0" ]; then
          ESTIMATED_USER_IMPACT=5   # Minor issues affect ~5% of users
        fi
        
        # Calculate compliance risk level
        COMPLIANCE_RISK="LOW"
        if [ "$CRITICAL_VIOLATIONS" -gt "0" ]; then
          COMPLIANCE_RISK="HIGH"
        elif [ "$HIGH_PRIORITY_ISSUES" -gt "5" ]; then
          COMPLIANCE_RISK="MEDIUM"
        fi
        
        # Calculate estimated fix time more accurately
        ESTIMATED_FIX_HOURS=$((CRITICAL_VIOLATIONS * 2 + HIGH_PRIORITY_ISSUES * 1 + (TOTAL_ISSUES - CRITICAL_VIOLATIONS - HIGH_PRIORITY_ISSUES) / 2))
        if [ "$ESTIMATED_FIX_HOURS" -lt "1" ] && [ "$TOTAL_ISSUES" -gt "0" ]; then
          ESTIMATED_FIX_HOURS=1
        fi
        
        # Determine scan quality score based on tool completion
        TOOLS_COMPLETED=0
        TOTAL_TOOLS=4
        
        if [ "${{ inputs.axe-violations }}" != "" ]; then TOOLS_COMPLETED=$((TOOLS_COMPLETED + 1)); fi
        if [ "${{ inputs.pa11y-issues }}" != "" ]; then TOOLS_COMPLETED=$((TOOLS_COMPLETED + 1)); fi
        if [ "${{ inputs.lighthouse-desktop-score }}" != "0" ]; then TOOLS_COMPLETED=$((TOOLS_COMPLETED + 1)); fi
        if [ "${{ inputs.playwright-violations }}" != "" ]; then TOOLS_COMPLETED=$((TOOLS_COMPLETED + 1)); fi
        
        SCAN_QUALITY_SCORE=$((TOOLS_COMPLETED * 100 / TOTAL_TOOLS))
        
        cat > "$METADATA_PATH" << EOF
        {
          "scan_metadata": {
            "scan_date": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
            "workflow_run_id": "${{ inputs.workflow-run-id }}",
            "workflow_run_number": "${{ inputs.workflow-run-number }}",
            "target_url": "${{ inputs.target-url }}",
            "standards": "${{ inputs.standards }}",
            "tools_used": "${{ inputs.scan-tools }}",
            "scan_quality_score": $SCAN_QUALITY_SCORE,
            "tools_completed": $TOOLS_COMPLETED,
            "total_tools": $TOTAL_TOOLS
          },
          "technical_results": {
            "total_issues": $TOTAL_ISSUES,
            "axe_violations": ${{ inputs.axe-violations }},
            "pa11y_issues": ${{ inputs.pa11y-issues }},
            "playwright_violations": ${{ inputs.playwright-violations }},
            "lighthouse_desktop_score": ${{ inputs.lighthouse-desktop-score }},
            "lighthouse_mobile_score": ${{ inputs.lighthouse-mobile-score }},
            "average_lighthouse_score": $AVERAGE_LIGHTHOUSE_SCORE,
            "status": "$OVERALL_STATUS"
          },
          "business_impact": {
            "compliance_risk_level": "$COMPLIANCE_RISK",
            "estimated_user_impact_percentage": $ESTIMATED_USER_IMPACT,
            "estimated_fix_hours": $ESTIMATED_FIX_HOURS,
            "priority_breakdown": {
              "critical_violations": $CRITICAL_VIOLATIONS,
              "high_priority_issues": $HIGH_PRIORITY_ISSUES,
              "medium_priority_issues": $((TOTAL_ISSUES - CRITICAL_VIOLATIONS - HIGH_PRIORITY_ISSUES))
            }
          },
          "executive_summary": {
            "scan_passed": $([ "$OVERALL_STATUS" == "passed" ] && echo "true" || echo "false"),
            "immediate_action_required": $([ "$CRITICAL_VIOLATIONS" -gt "0" ] && echo "true" || echo "false"),
            "business_ready": $([ "$TOTAL_ISSUES" -eq "0" ] && echo "true" || echo "false"),
            "audit_confidence": $([ "$SCAN_QUALITY_SCORE" -ge "75" ] && echo "high" || echo "medium")
          }
        }
        EOF
        
        echo "baseline-metadata-path=$METADATA_PATH" >> $GITHUB_OUTPUT
        echo "✅ Generated enhanced baseline metadata: $METADATA_PATH"

    - name: Generate HTML dashboard
      if: inputs.generate-dashboard == 'true'
      shell: bash
      run: |
        DASHBOARD_PATH="${{ inputs.report-dir }}/accessibility-dashboard.html"
        
        # Calculate enhanced metrics for dashboard
        CRITICAL_VIOLATIONS=${{ inputs.axe-violations }}
        HIGH_PRIORITY_ISSUES=$((PA11Y_ISSUES + PLAYWRIGHT_VIOLATIONS))
        
        # Estimate business metrics
        ESTIMATED_USER_IMPACT=0
        if [ "$CRITICAL_VIOLATIONS" -gt "0" ]; then
          ESTIMATED_USER_IMPACT=25
        elif [ "$HIGH_PRIORITY_ISSUES" -gt "0" ]; then
          ESTIMATED_USER_IMPACT=15
        elif [ "$TOTAL_ISSUES" -gt "0" ]; then
          ESTIMATED_USER_IMPACT=5
        fi
        
        COMPLIANCE_RISK="LOW"
        if [ "$CRITICAL_VIOLATIONS" -gt "0" ]; then
          COMPLIANCE_RISK="HIGH"
        elif [ "$HIGH_PRIORITY_ISSUES" -gt "5" ]; then
          COMPLIANCE_RISK="MEDIUM"
        fi
        
        ESTIMATED_FIX_HOURS=$((CRITICAL_VIOLATIONS * 2 + HIGH_PRIORITY_ISSUES * 1 + (TOTAL_ISSUES - CRITICAL_VIOLATIONS - HIGH_PRIORITY_ISSUES) / 2))
        if [ "$ESTIMATED_FIX_HOURS" -lt "1" ] && [ "$TOTAL_ISSUES" -gt "0" ]; then
          ESTIMATED_FIX_HOURS=1
        fi
        
        # Generate HTML dashboard using external script to avoid YAML template length limits
        bash -c 'cat > "$1" << "DASHBOARD_EOF"
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Enterprise Accessibility Scan Dashboard</title>
    <style>
        body { font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, sans-serif; line-height: 1.6; margin: 0; padding: 20px; background-color: #f5f5f5; }
        .container { max-width: 1200px; margin: 0 auto; background: white; border-radius: 8px; box-shadow: 0 2px 10px rgba(0,0,0,0.1); overflow: hidden; }
        .header { background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; padding: 30px; text-align: center; }
        .header h1 { margin: 0; font-size: 2.5em; }
        .status-passed { color: #22c55e; } .status-failed { color: #ef4444; }
        .metrics { display: grid; grid-template-columns: repeat(auto-fit, minmax(250px, 1fr)); gap: 20px; padding: 30px; }
        .metric-card { background: #f8fafc; border: 1px solid #e2e8f0; border-radius: 8px; padding: 20px; text-align: center; }
        .metric-value { font-size: 2em; font-weight: bold; margin: 10px 0; }
        .metric-value.good { color: #22c55e; } .metric-value.warning { color: #f59e0b; } .metric-value.error { color: #ef4444; }
        .tabs { display: flex; border-bottom: 1px solid #e2e8f0; margin: 0 20px; }
        .tab-button { background: none; border: none; padding: 15px 25px; cursor: pointer; border-bottom: 2px solid transparent; font-weight: 500; }
        .tab-button.active { border-bottom-color: #007bff; color: #007bff; }
        .tab-content { display: none; padding: 20px; } .tab-content.active { display: block; }
        .executive-summary { background: #f8f9fa; border-left: 4px solid #007bff; padding: 20px; margin: 20px; border-radius: 0 8px 8px 0; }
        .tool-section { margin-bottom: 30px; padding: 20px; background: #f8fafc; border-radius: 8px; }
        .footer { background: #374151; color: white; padding: 20px; text-align: center; font-size: 0.9em; }
    </style>
    <script>
        function showTab(tabName) {
            document.querySelectorAll(".tab-content").forEach(content => content.classList.remove("active"));
            document.querySelectorAll(".tab-button").forEach(button => button.classList.remove("active"));
            document.getElementById(tabName).classList.add("active");
            document.querySelector(`[onclick="showTab(\"${tabName}\")"]`).classList.add("active");
        }
        window.onload = function() { showTab("executive"); }
    </script>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>🔍 Enterprise Accessibility Scan Dashboard</h1>
            <p><strong>Target:</strong> $2</p>
            <p><strong>Standards:</strong> $3</p>
            <p><strong>Scan Date:</strong> $(date)</p>
            <h2 class="status-$4">Status: $(echo "$4" | tr "[:lower:]" "[:upper:]")</h2>
        </div>
        
        <div class="tabs">
            <button class="tab-button active" onclick="showTab(\"executive\")">👔 Executive Summary</button>
            <button class="tab-button" onclick="showTab(\"tools\")">🔧 Tool Results</button>
        </div>
        
        <div id="executive" class="tab-content active">
            <div class="executive-summary">
                <h2>📊 Business Impact Assessment</h2>
                <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 15px;">
                    <div><strong>Compliance Risk:</strong> <span>$5</span></div>
                    <div><strong>User Impact:</strong> $6% of users</div>
                    <div><strong>Fix Time:</strong> $7 hours</div>
                    <div><strong>Business Ready:</strong> $8</div>
                </div>
            </div>
            
            <div class="metrics">
                <div class="metric-card">
                    <h3>🚨 Total Issues</h3>
                    <div class="metric-value $9">$10</div>
                    <div>$11</div>
                </div>
                <div class="metric-card">
                    <h3>⚡ Critical Violations</h3>
                    <div class="metric-value $12">$13</div>
                    <div>$14</div>
                </div>
                <div class="metric-card">
                    <h3>💡 Accessibility Score</h3>
                    <div class="metric-value $15">$16%</div>
                    <div>Industry Standard: 90%+</div>
                </div>
                <div class="metric-card">
                    <h3>⏱️ Fix Investment</h3>
                    <div class="metric-value $17">$18 hrs</div>
                    <div>Development Time</div>
                </div>
            </div>
        </div>
        
        <div id="tools" class="tab-content">
            <h2>📊 Detailed Results by Tool</h2>
            <div class="tool-section">
                <h3>🔧 Axe-core: $19 violations</h3>
                <p>WCAG 2.1 compliance testing</p>
            </div>
            <div class="tool-section">
                <h3>📋 Pa11y: $20 issues</h3>
                <p>Content accessibility analysis</p>
            </div>
            <div class="tool-section">
                <h3>💡 Lighthouse: $21% (Desktop) / $22% (Mobile)</h3>
                <p>Performance and accessibility audit</p>
            </div>
            <div class="tool-section">
                <h3>🎭 Playwright: $23 violations</h3>
                <p>End-to-end accessibility testing</p>
            </div>
        </div>
        
        <div class="footer">
            <p>Generated on $(date) | Workflow Run: $24 | Scan Quality: $25%</p>
        </div>
    </div>
</body>
</html>
DASHBOARD_EOF' _ \
        "$DASHBOARD_PATH" \
        "${{ inputs.target-url }}" \
        "${{ inputs.standards }}" \
        "$OVERALL_STATUS" \
        "$COMPLIANCE_RISK" \
        "$ESTIMATED_USER_IMPACT" \
        "$ESTIMATED_FIX_HOURS" \
        "$([ "$TOTAL_ISSUES" -eq "0" ] && echo "✅ Yes" || echo "❌ No")" \
        "$([ "$TOTAL_ISSUES" -eq "0" ] && echo "good" || echo "error")" \
        "$TOTAL_ISSUES" \
        "$([ "$TOTAL_ISSUES" -eq "0" ] && echo "Ready for Production" || echo "Action Required")" \
        "$([ "$CRITICAL_VIOLATIONS" -eq "0" ] && echo "good" || echo "error")" \
        "$CRITICAL_VIOLATIONS" \
        "$([ "$CRITICAL_VIOLATIONS" -eq "0" ] && echo "WCAG Compliant" || echo "Blocks Users")" \
        "$([ "$(echo "$AVERAGE_LIGHTHOUSE_SCORE >= 90" | bc -l)" -eq "1" ] && echo "good" || echo "warning")" \
        "$AVERAGE_LIGHTHOUSE_SCORE" \
        "$([ "$ESTIMATED_FIX_HOURS" -le "4" ] && echo "good" || echo "warning")" \
        "$ESTIMATED_FIX_HOURS" \
        "${{ inputs.axe-violations }}" \
        "${{ inputs.pa11y-issues }}" \
        "${{ inputs.lighthouse-desktop-score }}" \
        "${{ inputs.lighthouse-mobile-score }}" \
        "${{ inputs.playwright-violations }}" \
        "${{ inputs.workflow-run-number }}" \
        "$(echo "scale=0; ($TOOLS_COMPLETED * 100) / $TOTAL_TOOLS" | bc)"
        
        echo "dashboard-path=$DASHBOARD_PATH" >> $GITHUB_OUTPUT
        echo "✅ Generated HTML dashboard: $DASHBOARD_PATH"

    - name: Generate enhanced markdown summary
      if: inputs.generate-summary == 'true'
      shell: bash
      run: |
        SUMMARY_PATH="${{ inputs.report-dir }}/accessibility-summary.md"
        
        # Calculate enhanced values
        AXE_VIOLATIONS=${{ inputs.axe-violations }}
        PA11Y_ISSUES=${{ inputs.pa11y-issues }}
        PLAYWRIGHT_VIOLATIONS=${{ inputs.playwright-violations }}
        LIGHTHOUSE_DESKTOP=${{ inputs.lighthouse-desktop-score }}
        LIGHTHOUSE_MOBILE=${{ inputs.lighthouse-mobile-score }}
        
        # Calculate business metrics
        CRITICAL_VIOLATIONS=$AXE_VIOLATIONS
        HIGH_PRIORITY_ISSUES=$((PA11Y_ISSUES + PLAYWRIGHT_VIOLATIONS))
        
        ESTIMATED_USER_IMPACT=0
        if [ "$CRITICAL_VIOLATIONS" -gt "0" ]; then
          ESTIMATED_USER_IMPACT=25
        elif [ "$HIGH_PRIORITY_ISSUES" -gt "0" ]; then
          ESTIMATED_USER_IMPACT=15
        elif [ "$TOTAL_ISSUES" -gt "0" ]; then
          ESTIMATED_USER_IMPACT=5
        fi
        
        COMPLIANCE_RISK="LOW"
        if [ "$CRITICAL_VIOLATIONS" -gt "0" ]; then
          COMPLIANCE_RISK="HIGH"
        elif [ "$HIGH_PRIORITY_ISSUES" -gt "5" ]; then
          COMPLIANCE_RISK="MEDIUM"
        fi
        
        ESTIMATED_FIX_HOURS=$((CRITICAL_VIOLATIONS * 2 + HIGH_PRIORITY_ISSUES * 1 + (TOTAL_ISSUES - CRITICAL_VIOLATIONS - HIGH_PRIORITY_ISSUES) / 2))
        if [ "$ESTIMATED_FIX_HOURS" -lt "1" ] && [ "$TOTAL_ISSUES" -gt "0" ]; then
          ESTIMATED_FIX_HOURS=1
        fi
        
        # Tool completion status
        TOOLS_COMPLETED=0
        TOTAL_TOOLS=4
        
        if [ "$AXE_VIOLATIONS" != "" ]; then TOOLS_COMPLETED=$((TOOLS_COMPLETED + 1)); fi
        if [ "$PA11Y_ISSUES" != "" ]; then TOOLS_COMPLETED=$((TOOLS_COMPLETED + 1)); fi
        if [ "$LIGHTHOUSE_DESKTOP" != "0" ]; then TOOLS_COMPLETED=$((TOOLS_COMPLETED + 1)); fi
        if [ "$PLAYWRIGHT_VIOLATIONS" != "" ]; then TOOLS_COMPLETED=$((TOOLS_COMPLETED + 1)); fi
        
        SCAN_QUALITY_SCORE=$((TOOLS_COMPLETED * 100 / TOTAL_TOOLS))
        
        # Enhanced status indicators with error handling
        AXE_STATUS="✅ Passed"
        if [ "$AXE_VIOLATIONS" == "" ]; then
          AXE_STATUS="⚠️ Tool Failed"
        elif [ "$AXE_VIOLATIONS" -gt "0" ]; then
          AXE_STATUS="❌ Failed"
        fi
        
        PA11Y_STATUS="✅ Passed"
        if [ "$PA11Y_ISSUES" == "" ]; then
          PA11Y_STATUS="⚠️ Tool Failed"
        elif [ "$PA11Y_ISSUES" -gt "0" ]; then
          PA11Y_STATUS="❌ Failed"
        fi
        
        PLAYWRIGHT_STATUS="✅ Passed"
        if [ "$PLAYWRIGHT_VIOLATIONS" == "" ]; then
          PLAYWRIGHT_STATUS="⚠️ Tool Failed"
        elif [ "$PLAYWRIGHT_VIOLATIONS" -gt "0" ]; then
          PLAYWRIGHT_STATUS="❌ Failed"
        fi
        
        LIGHTHOUSE_DESKTOP_STATUS="✅ Excellent"
        if [ "$LIGHTHOUSE_DESKTOP" == "0" ]; then
          LIGHTHOUSE_DESKTOP_STATUS="⚠️ Tool Failed"
        elif [ "$LIGHTHOUSE_DESKTOP" -lt "90" ] && [ "$LIGHTHOUSE_DESKTOP" -ge "70" ]; then
          LIGHTHOUSE_DESKTOP_STATUS="⚠️ Good"
        elif [ "$LIGHTHOUSE_DESKTOP" -lt "70" ]; then
          LIGHTHOUSE_DESKTOP_STATUS="❌ Needs Work"
        fi
        
        LIGHTHOUSE_MOBILE_STATUS="✅ Excellent"
        if [ "$LIGHTHOUSE_MOBILE" == "0" ]; then
          LIGHTHOUSE_MOBILE_STATUS="⚠️ Tool Failed"
        elif [ "$LIGHTHOUSE_MOBILE" -lt "90" ] && [ "$LIGHTHOUSE_MOBILE" -ge "70" ]; then
          LIGHTHOUSE_MOBILE_STATUS="⚠️ Good"
        elif [ "$LIGHTHOUSE_MOBILE" -lt "70" ]; then
          LIGHTHOUSE_MOBILE_STATUS="❌ Needs Work"
        fi
        
        cat > "$SUMMARY_PATH" << EOF
        # 🔍 Enterprise Accessibility Scan Summary

        **Target URL:** ${{ inputs.target-url }}  
        **Standards:** ${{ inputs.standards }}  
        **Scan Date:** $(date)  
        **Status:** $([ "$OVERALL_STATUS" == "passed" ] && echo "✅ PASSED" || echo "❌ FAILED")  
        **Scan Quality:** $([ "$SCAN_QUALITY_SCORE" -ge "75" ] && echo "✅ High" || echo "⚠️ Medium") ($SCAN_QUALITY_SCORE% tools completed)

        ## 📊 Executive Summary

        | Business Metric | Value | Impact |
        |-----------------|-------|--------|
        | 🏢 Compliance Risk | **$COMPLIANCE_RISK** | $([ "$COMPLIANCE_RISK" == "HIGH" ] && echo "Legal exposure - immediate action required" || ([ "$COMPLIANCE_RISK" == "MEDIUM" ] && echo "Moderate risk - plan remediation" || echo "Minimal risk - maintain standards")) |
        | 👥 User Impact | **$ESTIMATED_USER_IMPACT%** | $([ "$ESTIMATED_USER_IMPACT" -gt "20" ] && echo "Significant accessibility barriers" || ([ "$ESTIMATED_USER_IMPACT" -gt "10" ] && echo "Some users may face difficulties" || echo "Minor impact on user experience")) |
        | ⏱️ Fix Investment | **$ESTIMATED_FIX_HOURS hours** | $([ "$ESTIMATED_FIX_HOURS" -le "4" ] && echo "Quick wins available" || ([ "$ESTIMATED_FIX_HOURS" -le "8" ] && echo "Moderate development effort" || echo "Significant investment required")) |
        | 🚀 Business Ready | $([ "$TOTAL_ISSUES" -eq "0" ] && echo "**✅ YES**" || echo "**❌ NO**") | $([ "$TOTAL_ISSUES" -eq "0" ] && echo "Ready for production deployment" || echo "Requires accessibility fixes before launch") |

        ## 🔧 Technical Results Overview

        | Tool | Issues/Score | Status | Notes |
        |------|-------------|--------|--------|
        | 🔧 Axe-core | $AXE_VIOLATIONS violations | $AXE_STATUS | $([ "$AXE_STATUS" == "⚠️ Tool Failed" ] && echo "Scan incomplete - check logs" || echo "WCAG 2.1 compliance") |
        | 📋 Pa11y | $PA11Y_ISSUES issues | $PA11Y_STATUS | $([ "$PA11Y_STATUS" == "⚠️ Tool Failed" ] && echo "Scan incomplete - check logs" || echo "Content analysis") |
        | 💡 Lighthouse Desktop | $LIGHTHOUSE_DESKTOP% | $LIGHTHOUSE_DESKTOP_STATUS | $([ "$LIGHTHOUSE_DESKTOP_STATUS" == "⚠️ Tool Failed" ] && echo "Scan incomplete - check logs" || echo "Performance score") |
        | 💡 Lighthouse Mobile | $LIGHTHOUSE_MOBILE% | $LIGHTHOUSE_MOBILE_STATUS | $([ "$LIGHTHOUSE_MOBILE_STATUS" == "⚠️ Tool Failed" ] && echo "Scan incomplete - check logs" || echo "Mobile performance") |
        | 🎭 Playwright | $PLAYWRIGHT_VIOLATIONS violations | $PLAYWRIGHT_STATUS | $([ "$PLAYWRIGHT_STATUS" == "⚠️ Tool Failed" ] && echo "Scan incomplete - check logs" || echo "End-to-end tests") |

        **Total Issues Found:** $TOTAL_ISSUES

        EOF
        
        # Add scan quality warning if needed
        if [ "$SCAN_QUALITY_SCORE" -lt "75" ]; then
          cat >> "$SUMMARY_PATH" << 'EOF'
        ## ⚠️ Scan Quality Notice

        **WARNING:** Some accessibility testing tools failed to complete successfully. The results may be incomplete.

        - **Scan Completion:** $SCAN_QUALITY_SCORE% of tools completed
        - **Recommendation:** Re-run the accessibility workflow for comprehensive results
        - **Impact:** Missing tool data may underrepresent actual issues

        EOF
        fi
        
        # Add conditional content based on status
        if [ "$TOTAL_ISSUES" -eq "0" ]; then
          cat >> "$SUMMARY_PATH" << 'EOF'
        ## 🎉 Congratulations!

        Your application passes all accessibility tests! This means:

        - ✅ **WCAG 2.1 AA Compliance**: No critical violations found
        - ✅ **Content Quality**: All images, headings, and forms are properly structured
        - ✅ **Performance**: Accessibility features don't impact load times
        - ✅ **User Experience**: Keyboard navigation and screen readers work correctly

        ### Maintenance Recommendations

        - Run accessibility scans regularly (weekly/monthly)
        - Test with real users who use assistive technologies
        - Keep accessibility in mind for new features
        - Consider upgrading to WCAG 2.2 standards when ready
        EOF
        else
          cat >> "$SUMMARY_PATH" << EOF
        ## 🎯 Implementation Strategy

        ### Phase 1: Critical Fixes (High Priority)
        EOF
          
          if [ "$AXE_VIOLATIONS" -gt "0" ]; then
            echo "- **Fix $AXE_VIOLATIONS Axe violations**: These are WCAG compliance failures that block users with disabilities" >> "$SUMMARY_PATH"
            echo "- **Business Impact**: High legal risk, affects $ESTIMATED_USER_IMPACT% of users" >> "$SUMMARY_PATH"
            echo "- **Time Investment**: ~$((AXE_VIOLATIONS * 2)) hours" >> "$SUMMARY_PATH"
          fi
          
          if [ "$(echo "$AVERAGE_LIGHTHOUSE_SCORE < 70" | bc -l)" -eq "1" ] && [ "$AVERAGE_LIGHTHOUSE_SCORE" != "0" ]; then
            echo "- **Improve Lighthouse scores**: Address structural accessibility issues" >> "$SUMMARY_PATH"
            echo "- **Current Score**: $AVERAGE_LIGHTHOUSE_SCORE% (Target: 90%+)" >> "$SUMMARY_PATH"
          fi
          
          cat >> "$SUMMARY_PATH" << EOF

        ### Phase 2: Content Quality (Medium Priority)
        EOF
          
          if [ "$PA11Y_ISSUES" -gt "0" ]; then
            echo "- **Resolve $PA11Y_ISSUES Pa11y issues**: Fix content accessibility problems (alt text, headings, etc.)" >> "$SUMMARY_PATH"
            echo "- **Impact**: Improves experience for screen reader users" >> "$SUMMARY_PATH"
            echo "- **Time Investment**: ~$((PA11Y_ISSUES / 2)) hours" >> "$SUMMARY_PATH"
          fi
          
          cat >> "$SUMMARY_PATH" << EOF

        ### Phase 3: Interaction Testing (Medium Priority)  
        EOF
          
          if [ "$PLAYWRIGHT_VIOLATIONS" -gt "0" ]; then
            echo "- **Fix $PLAYWRIGHT_VIOLATIONS Playwright issues**: Ensure keyboard navigation and screen reader compatibility" >> "$SUMMARY_PATH"
            echo "- **Impact**: Critical for users who cannot use a mouse" >> "$SUMMARY_PATH"
            echo "- **Time Investment**: ~$PLAYWRIGHT_VIOLATIONS hours" >> "$SUMMARY_PATH"
          fi
          
          cat >> "$SUMMARY_PATH" << EOF

        ### Next Steps
        1. **Download Reports**: Get detailed scan results from workflow artifacts
        2. **Prioritize Critical Issues**: Start with Axe violations (highest business impact)
        3. **Use Detailed Reports**: Find exact elements that need fixing
        4. **Validate Changes**: Re-run this scan after making changes
        5. **Target Metrics**: Aim for 0 violations and 90+ Lighthouse scores

        ### Business Case for Fixes
        - **Market Access**: Accessibility opens your product to 15% more users
        - **Legal Compliance**: Reduces ADA/Section 508 violation risk
        - **SEO Benefits**: Many accessibility fixes improve search rankings
        - **User Experience**: Benefits all users, not just those with disabilities

        ### Resources
        - [WCAG 2.1 Guidelines](https://www.w3.org/WAI/WCAG21/quickref/)
        - [React Accessibility Guide](https://react.dev/learn/accessibility)
        - [MDN Accessibility](https://developer.mozilla.org/en-US/docs/Web/Accessibility)
        EOF
        fi
        
        cat >> "$SUMMARY_PATH" << EOF

        ## 📋 Report Files

        The following detailed reports are available in the workflow artifacts:

        - **axe-report.json**: Detailed WCAG violation information with fix guidance
        - **pa11y-report.html**: Visual content accessibility report with screenshots
        - **lighthouse-accessibility-desktop.json**: Desktop performance audit
        - **lighthouse-accessibility-mobile.json**: Mobile performance audit
        - **playwright-report/**: Interactive test results with failure details
        - **accessibility-dashboard.html**: Executive and developer dashboards
        - **baseline-metadata.json**: Machine-readable scan results for tracking

        ## 🔄 Workflow Information

        - **Workflow Run:** ${{ inputs.workflow-run-number }}
        - **Tools Used:** ${{ inputs.scan-tools }}
        - **Scan Quality:** $SCAN_QUALITY_SCORE% completion rate
        - **Generated:** $(date)

        ## 📈 Tracking & Metrics

        | Metric | Value | Notes |
        |--------|-------|-------|
        | Total Issues | $TOTAL_ISSUES | All tools combined |
        | Critical Issues | $CRITICAL_VIOLATIONS | WCAG violations requiring immediate fix |
        | User Impact | $ESTIMATED_USER_IMPACT% | Estimated percentage of users with disabilities affected |
        | Fix Investment | $ESTIMATED_FIX_HOURS hours | Estimated development time required |
        | Compliance Risk | $COMPLIANCE_RISK | Legal/regulatory risk assessment |

        ---

        *This report was automatically generated by the Enterprise Accessibility Scanner.*
        EOF
        
        echo "summary-path=$SUMMARY_PATH" >> $GITHUB_OUTPUT
        echo "✅ Generated enhanced markdown summary: $SUMMARY_PATH"

    - name: Generate enhanced PR comment format
      if: inputs.generate-pr-comment == 'true'
      shell: bash
      run: |
        PR_COMMENT_PATH="${{ inputs.report-dir }}/pr-comment.md"
        
        # Calculate enhanced metrics for PR comment
        CRITICAL_VIOLATIONS=${{ inputs.axe-violations }}
        HIGH_PRIORITY_ISSUES=$((PA11Y_ISSUES + PLAYWRIGHT_VIOLATIONS))
        
        ESTIMATED_USER_IMPACT=0
        if [ "$CRITICAL_VIOLATIONS" -gt "0" ]; then
          ESTIMATED_USER_IMPACT=25
        elif [ "$HIGH_PRIORITY_ISSUES" -gt "0" ]; then
          ESTIMATED_USER_IMPACT=15
        elif [ "$TOTAL_ISSUES" -gt "0" ]; then
          ESTIMATED_USER_IMPACT=5
        fi
        
        COMPLIANCE_RISK="LOW"
        if [ "$CRITICAL_VIOLATIONS" -gt "0" ]; then
          COMPLIANCE_RISK="HIGH"
        elif [ "$HIGH_PRIORITY_ISSUES" -gt "5" ]; then
          COMPLIANCE_RISK="MEDIUM"
        fi
        
        ESTIMATED_FIX_HOURS=$((CRITICAL_VIOLATIONS * 2 + HIGH_PRIORITY_ISSUES * 1 + (TOTAL_ISSUES - CRITICAL_VIOLATIONS - HIGH_PRIORITY_ISSUES) / 2))
        if [ "$ESTIMATED_FIX_HOURS" -lt "1" ] && [ "$TOTAL_ISSUES" -gt "0" ]; then
          ESTIMATED_FIX_HOURS=1
        fi
        
        # Tool completion tracking  
        TOOLS_COMPLETED=0
        TOTAL_TOOLS=4
        
        if [ "${{ inputs.axe-violations }}" != "" ]; then TOOLS_COMPLETED=$((TOOLS_COMPLETED + 1)); fi
        if [ "${{ inputs.pa11y-issues }}" != "" ]; then TOOLS_COMPLETED=$((TOOLS_COMPLETED + 1)); fi
        if [ "${{ inputs.lighthouse-desktop-score }}" != "0" ]; then TOOLS_COMPLETED=$((TOOLS_COMPLETED + 1)); fi
        if [ "${{ inputs.playwright-violations }}" != "" ]; then TOOLS_COMPLETED=$((TOOLS_COMPLETED + 1)); fi
        
        SCAN_QUALITY_SCORE=$((TOOLS_COMPLETED * 100 / TOTAL_TOOLS))
        
        cat > "$PR_COMMENT_PATH" << EOF
        ## 🔍 Accessibility Scan Results

        $([ "$OVERALL_STATUS" == "passed" ] && echo "### ✅ All accessibility tests passed!" || echo "### ❌ Accessibility issues found")

        **Scanned:** ${{ inputs.target-url }}  
        **Standards:** ${{ inputs.standards }}  
        **Scan Quality:** $([ "$SCAN_QUALITY_SCORE" -ge "75" ] && echo "✅ High" || echo "⚠️ Medium") ($SCAN_QUALITY_SCORE% tools completed)

        ### 📊 Business Impact Summary

        | Metric | Value | Impact |
        |--------|-------|--------|
        | 🏢 **Compliance Risk** | **$COMPLIANCE_RISK** | $([ "$COMPLIANCE_RISK" == "HIGH" ] && echo "Immediate action required" || ([ "$COMPLIANCE_RISK" == "MEDIUM" ] && echo "Plan remediation" || echo "Low risk")) |
        | 👥 **User Impact** | **$ESTIMATED_USER_IMPACT%** of users with disabilities | $([ "$ESTIMATED_USER_IMPACT" -gt "15" ] && echo "Significant barriers" || echo "Limited impact") |
        | ⏱️ **Fix Investment** | **$ESTIMATED_FIX_HOURS hours** | $([ "$ESTIMATED_FIX_HOURS" -le "4" ] && echo "Quick wins" || echo "Moderate effort") |

        ### 🔧 Technical Results

        | Tool | Result | Status | Notes |
        |------|--------|--------|-------|
        | 🔧 Axe-core | $([ "${{ inputs.axe-violations }}" == "" ] && echo "⚠️ Tool Failed" || ([ "${{ inputs.axe-violations }}" -eq "0" ] && echo "✅ ${{ inputs.axe-violations }} violations" || echo "❌ ${{ inputs.axe-violations }} violations")) | WCAG 2.1 compliance | $([ "${{ inputs.axe-violations }}" == "" ] && echo "Check workflow logs" || echo "Critical for legal compliance") |
        | 📋 Pa11y | $([ "${{ inputs.pa11y-issues }}" == "" ] && echo "⚠️ Tool Failed" || ([ "${{ inputs.pa11y-issues }}" -eq "0" ] && echo "✅ ${{ inputs.pa11y-issues }} issues" || echo "❌ ${{ inputs.pa11y-issues }} issues")) | Content analysis | $([ "${{ inputs.pa11y-issues }}" == "" ] && echo "Check workflow logs" || echo "Affects content quality") |
        | 💡 Lighthouse | $([ "${{ inputs.lighthouse-desktop-score }}" == "0" ] && echo "⚠️ Tool Failed" || ([ "$(echo "$AVERAGE_LIGHTHOUSE_SCORE >= 90" | bc -l)" -eq "1" ] && echo "✅" || echo "⚠️") ${AVERAGE_LIGHTHOUSE_SCORE}%) | Performance score | $([ "${{ inputs.lighthouse-desktop-score }}" == "0" ] && echo "Check workflow logs" || echo "Desktop: ${{ inputs.lighthouse-desktop-score }}%, Mobile: ${{ inputs.lighthouse-mobile-score }}%") |
        | 🎭 Playwright | $([ "${{ inputs.playwright-violations }}" == "" ] && echo "⚠️ Tool Failed" || ([ "${{ inputs.playwright-violations }}" -eq "0" ] && echo "✅ ${{ inputs.playwright-violations }} violations" || echo "❌ ${{ inputs.playwright-violations }} violations")) | End-to-end tests | $([ "${{ inputs.playwright-violations }}" == "" ] && echo "Check workflow logs" || echo "Tests user interactions") |

        EOF
        
        # Add scan quality warning if needed
        if [ "$SCAN_QUALITY_SCORE" -lt "75" ]; then
          cat >> "$PR_COMMENT_PATH" << 'EOF'
        > ⚠️ **Scan Quality Notice:** Some tools failed to complete. Results may be incomplete. Consider re-running the workflow.

        EOF
        fi
        
        # Add conditional action plan
        if [ "$TOTAL_ISSUES" -gt "0" ]; then
          cat >> "$PR_COMMENT_PATH" << 'EOF'
        ### 🎯 Priority Actions Required

        EOF
          
          if [ "$CRITICAL_VIOLATIONS" -gt "0" ]; then
            echo "1. **🚨 CRITICAL**: Fix $CRITICAL_VIOLATIONS WCAG violations for legal compliance" >> "$PR_COMMENT_PATH"
          fi
          
          if [ "$HIGH_PRIORITY_ISSUES" -gt "0" ]; then
            echo "$([ "$CRITICAL_VIOLATIONS" -gt "0" ] && echo "2" || echo "1"). **🏗️ HIGH**: Address $HIGH_PRIORITY_ISSUES structural/interaction issues" >> "$PR_COMMENT_PATH"
          fi
          
          if [ "$(echo "$AVERAGE_LIGHTHOUSE_SCORE < 90" | bc -l)" -eq "1" ] && [ "$AVERAGE_LIGHTHOUSE_SCORE" != "0" ]; then
            NEXT_NUM=$((CRITICAL_VIOLATIONS > 0 ? (HIGH_PRIORITY_ISSUES > 0 ? 3 : 2) : (HIGH_PRIORITY_ISSUES > 0 ? 2 : 1)))
            echo "$NEXT_NUM. **💡 MEDIUM**: Improve Lighthouse score from $AVERAGE_LIGHTHOUSE_SCORE% to 90%+" >> "$PR_COMMENT_PATH"
          fi
          
          cat >> "$PR_COMMENT_PATH" << 'EOF'

        💡 **Developer Tip**: Start with Axe violations as they have the highest impact on users with disabilities and legal compliance.

        EOF
        fi

        cat >> "$PR_COMMENT_PATH" << EOF
        ### 📁 Detailed Reports

        Download the complete accessibility scan results from the [workflow artifacts](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ inputs.workflow-run-id }}) for detailed analysis:

        - **📊 Executive Dashboard**: \`accessibility-dashboard.html\` (business metrics)
        - **🔧 Developer Guide**: Detailed technical findings and fix guidance
        - **📈 Trend Data**: \`baseline-metadata.json\` for tracking progress

        $([ "$TOTAL_ISSUES" -eq "0" ] && echo "🎉 **Great work!** Your changes maintain excellent accessibility standards." || echo "🔧 **Next steps**: Review the detailed reports and implement fixes by priority.")

        <details>
        <summary>📋 View scan metadata</summary>

        - **Workflow Run:** #${{ inputs.workflow-run-number }}
        - **Tools Used:** ${{ inputs.scan-tools }}
        - **Scan Time:** $(date)
        - **Total Issues:** $TOTAL_ISSUES
        - **Critical Issues:** $CRITICAL_VIOLATIONS
        - **Scan Quality:** $SCAN_QUALITY_SCORE% ($TOOLS_COMPLETED/$TOTAL_TOOLS tools completed)
        - **Business Impact:** $ESTIMATED_USER_IMPACT% user impact, $COMPLIANCE_RISK compliance risk
        - **Fix Estimate:** $ESTIMATED_FIX_HOURS hours development time

        </details>
        EOF
        
        echo "pr-comment-path=$PR_COMMENT_PATH" >> $GITHUB_OUTPUT
        echo "✅ Generated enhanced PR comment: $PR_COMMENT_PATH"

    - name: Create enhanced issue summary for tracking
      shell: bash
      run: |
        ISSUE_SUMMARY_PATH="${{ inputs.report-dir }}/issue-summary.json"
        
        # Calculate enhanced metrics
        CRITICAL_VIOLATIONS=${{ inputs.axe-violations }}
        HIGH_PRIORITY_ISSUES=$((PA11Y_ISSUES + PLAYWRIGHT_VIOLATIONS))
        
        ESTIMATED_USER_IMPACT=0
        if [ "$CRITICAL_VIOLATIONS" -gt "0" ]; then
          ESTIMATED_USER_IMPACT=25
        elif [ "$HIGH_PRIORITY_ISSUES" -gt "0" ]; then
          ESTIMATED_USER_IMPACT=15
        elif [ "$TOTAL_ISSUES" -gt "0" ]; then
          ESTIMATED_USER_IMPACT=5
        fi
        
        COMPLIANCE_RISK="LOW"
        if [ "$CRITICAL_VIOLATIONS" -gt "0" ]; then
          COMPLIANCE_RISK="HIGH"
        elif [ "$HIGH_PRIORITY_ISSUES" -gt "5" ]; then
          COMPLIANCE_RISK="MEDIUM"
        fi
        
        ESTIMATED_FIX_HOURS=$((CRITICAL_VIOLATIONS * 2 + HIGH_PRIORITY_ISSUES * 1 + (TOTAL_ISSUES - CRITICAL_VIOLATIONS - HIGH_PRIORITY_ISSUES) / 2))
        if [ "$ESTIMATED_FIX_HOURS" -lt "1" ] && [ "$TOTAL_ISSUES" -gt "0" ]; then
          ESTIMATED_FIX_HOURS=1
        fi
        
        # Tool completion tracking
        TOOLS_COMPLETED=0
        TOTAL_TOOLS=4
        TOOL_FAILURES=""
        
        if [ "${{ inputs.axe-violations }}" != "" ]; then 
          TOOLS_COMPLETED=$((TOOLS_COMPLETED + 1))
        else
          TOOL_FAILURES="${TOOL_FAILURES}axe-core, "
        fi
        
        if [ "${{ inputs.pa11y-issues }}" != "" ]; then 
          TOOLS_COMPLETED=$((TOOLS_COMPLETED + 1))
        else
          TOOL_FAILURES="${TOOL_FAILURES}pa11y, "
        fi
        
        if [ "${{ inputs.lighthouse-desktop-score }}" != "0" ]; then 
          TOOLS_COMPLETED=$((TOOLS_COMPLETED + 1))
        else
          TOOL_FAILURES="${TOOL_FAILURES}lighthouse, "
        fi
        
        if [ "${{ inputs.playwright-violations }}" != "" ]; then 
          TOOLS_COMPLETED=$((TOOLS_COMPLETED + 1))
        else
          TOOL_FAILURES="${TOOL_FAILURES}playwright, "
        fi
        
        # Remove trailing comma and space
        TOOL_FAILURES=$(echo "$TOOL_FAILURES" | sed 's/, $//')
        SCAN_QUALITY_SCORE=$((TOOLS_COMPLETED * 100 / TOTAL_TOOLS))
        
        # Build enhanced priority actions array
        PRIORITY_ACTIONS=""
        
        if [ "$CRITICAL_VIOLATIONS" -gt "0" ]; then
          PRIORITY_ACTIONS="\"Fix $CRITICAL_VIOLATIONS critical WCAG violations (high legal risk)\""
        fi
        
        if [ "$(echo "$AVERAGE_LIGHTHOUSE_SCORE < 90" | bc -l)" -eq "1" ] && [ "$AVERAGE_LIGHTHOUSE_SCORE" != "0" ]; then
          if [ -n "$PRIORITY_ACTIONS" ]; then
            PRIORITY_ACTIONS="$PRIORITY_ACTIONS, \"Improve Lighthouse accessibility score from $AVERAGE_LIGHTHOUSE_SCORE% to 90+\""
          else
            PRIORITY_ACTIONS="\"Improve Lighthouse accessibility score from $AVERAGE_LIGHTHOUSE_SCORE% to 90+\""
          fi
        fi
        
        if [ "${{ inputs.pa11y-issues }}" -gt "0" ]; then
          if [ -n "$PRIORITY_ACTIONS" ]; then
            PRIORITY_ACTIONS="$PRIORITY_ACTIONS, \"Resolve ${{ inputs.pa11y-issues }} content accessibility issues\""
          else
            PRIORITY_ACTIONS="\"Resolve ${{ inputs.pa11y-issues }} content accessibility issues\""
          fi
        fi
        
        if [ "${{ inputs.playwright-violations }}" -gt "0" ]; then
          if [ -n "$PRIORITY_ACTIONS" ]; then
            PRIORITY_ACTIONS="$PRIORITY_ACTIONS, \"Fix ${{ inputs.playwright-violations }} interaction/navigation issues\""
          else
            PRIORITY_ACTIONS="\"Fix ${{ inputs.playwright-violations }} interaction/navigation issues\""
          fi
        fi
        
        # Add tool failure actions if needed
        if [ "$SCAN_QUALITY_SCORE" -lt "100" ]; then
          if [ -n "$PRIORITY_ACTIONS" ]; then
            PRIORITY_ACTIONS="$PRIORITY_ACTIONS, \"Re-run accessibility scan (some tools failed: $TOOL_FAILURES)\""
          else
            PRIORITY_ACTIONS="\"Re-run accessibility scan (some tools failed: $TOOL_FAILURES)\""
          fi
        fi
        
        if [ -n "$PRIORITY_ACTIONS" ]; then
          PRIORITY_ACTIONS="$PRIORITY_ACTIONS, \"Validate all fixes with follow-up accessibility scan\""
        else
          PRIORITY_ACTIONS="\"Run regular accessibility scans to maintain standards\""
        fi
        
        cat > "$ISSUE_SUMMARY_PATH" << EOF
        {
          "scan_results": {
            "total_issues": $TOTAL_ISSUES,
            "status": "$OVERALL_STATUS",
            "scan_quality_score": $SCAN_QUALITY_SCORE,
            "tools_completed": $TOOLS_COMPLETED,
            "total_tools": $TOTAL_TOOLS
          },
          "technical_breakdown": {
            "axe_violations": ${{ inputs.axe-violations }},
            "pa11y_issues": ${{ inputs.pa11y-issues }},
            "playwright_violations": ${{ inputs.playwright-violations }},
            "lighthouse_desktop_score": ${{ inputs.lighthouse-desktop-score }},
            "lighthouse_mobile_score": ${{ inputs.lighthouse-mobile-score }},
            "average_lighthouse_score": $AVERAGE_LIGHTHOUSE_SCORE
          },
          "business_impact": {
            "compliance_risk_level": "$COMPLIANCE_RISK",
            "estimated_user_impact_percentage": $ESTIMATED_USER_IMPACT,
            "estimated_fix_hours": $ESTIMATED_FIX_HOURS,
            "business_ready": $([ "$TOTAL_ISSUES" -eq "0" ] && echo "true" || echo "false"),
            "immediate_action_required": $([ "$CRITICAL_VIOLATIONS" -gt "0" ] && echo "true" || echo "false")
          },
          "scan_metadata": {
            "target_url": "${{ inputs.target-url }}",
            "standards": "${{ inputs.standards }}",
            "tools_used": "${{ inputs.scan-tools }}",
            "scan_date": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
            "workflow_run_id": "${{ inputs.workflow-run-id }}",
            "workflow_run_number": "${{ inputs.workflow-run-number }}",
            "tool_failures": $([ -n "$TOOL_FAILURES" ] && echo "\"$TOOL_FAILURES\"" || echo "null")
          },
          "priority_actions": [
            $PRIORITY_ACTIONS
          ],
          "executive_summary": {
            "recommendation": "$([ "$TOTAL_ISSUES" -eq "0" ] && echo "Deploy with confidence - all accessibility standards met" || ([ "$CRITICAL_VIOLATIONS" -gt "0" ] && echo "Delay deployment - critical compliance issues require immediate fixes" || ([ "$ESTIMATED_FIX_HOURS" -le "4" ] && echo "Quick fixes available - implement before next release" || echo "Plan accessibility improvements for next development cycle")))",
            "risk_assessment": "$([ "$COMPLIANCE_RISK" == "HIGH" ] && echo "High legal/regulatory risk due to WCAG violations" || ([ "$COMPLIANCE_RISK" == "MEDIUM" ] && echo "Moderate risk - plan remediation within 1-2 sprints" || echo "Low risk - maintain current accessibility standards"))",
            "user_impact_summary": "$([ "$ESTIMATED_USER_IMPACT" -eq "0" ] && echo "All users can access the application effectively" || echo "$ESTIMATED_USER_IMPACT% of users with disabilities may face barriers")"
          }
        }
        EOF
        
        echo "✅ Generated enhanced issue summary: $ISSUE_SUMMARY_PATH"
        
        echo "=== Final Enhanced Report Generation Summary ==="
        echo "Total Issues: $TOTAL_ISSUES"
        echo "Critical Violations: $CRITICAL_VIOLATIONS"
        echo "Compliance Risk: $COMPLIANCE_RISK"
        echo "User Impact: $ESTIMATED_USER_IMPACT%"
        echo "Fix Investment: $ESTIMATED_FIX_HOURS hours"
        echo "Scan Quality: $SCAN_QUALITY_SCORE% ($TOOLS_COMPLETED/$TOTAL_TOOLS tools)"
        echo "Overall Status: $OVERALL_STATUS"
        echo "Business Ready: $([ "$TOTAL_ISSUES" -eq "0" ] && echo "YES" || echo "NO")"
        echo ""
        echo "Enhanced Reports Generated:"
        ls -la ${{ inputs.report-dir }}/ | grep -E '\.(html|md|json)$' || echo "No reports found"