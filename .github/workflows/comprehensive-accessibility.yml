name: Comprehensive Web Accessibility Evaluation

on:
  schedule:
    # Run every Monday at 9:00 AM UTC (weekly)
    - cron: '0 9 * * 1'
  workflow_dispatch: # Allow manual triggering
  
env:
  TARGET_URL: https://ncaa-d1-softball.netlify.app/
  
jobs:
  accessibility-audit:
    runs-on: ubuntu-latest
    name: Comprehensive Accessibility Audit
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Install accessibility testing tools
        run: |
          npm install -g pa11y @axe-core/cli lighthouse
          npm install puppeteer --save-dev
          npm install @axe-core/playwright --save-dev
          
      - name: Install Playwright browsers
        run: |
          npx playwright install chromium --with-deps || echo "Browser installation failed, continuing with other tools"
          
      - name: Create reports directory
        run: mkdir -p accessibility-reports
        
      - name: Create pa11y configuration file
        run: |
          cat > pa11y.json << 'EOF'
          {
            "chromeLaunchConfig": {
              "args": [
                "--no-sandbox",
                "--disable-dev-shm-usage",
                "--disable-gpu",
                "--headless"
              ]
            },
            "timeout": 30000,
            "wait": 3000,
            "standard": "WCAG2AA",
            "runners": ["htmlcs"],
            "ignore": [
              "WCAG2AA.Principle1.Guideline1_4.1_4_3.G18.Fail"
            ]
          }
          EOF

      - name: Create keyboard navigation test script
        run: |
          cat > keyboard-test.cjs << 'EOF'
          const puppeteer = require('puppeteer');
          const { writeFileSync } = require('fs');

          async function testKeyboardNavigation() {
            const browser = await puppeteer.launch({
              headless: true,
              args: ['--no-sandbox', '--disable-dev-shm-usage']
            });
            
            const page = await browser.newPage();
            const issues = [];
            
            try {
              const targetUrl = process.env.TARGET_URL || 'https://ncaa-d1-softball.netlify.app/';
              console.log(`Testing keyboard navigation on: ${targetUrl}`);
              await page.goto(targetUrl, { waitUntil: 'networkidle0', timeout: 30000 });
              
              // Test tab navigation
              console.log('Testing focusable elements...');
              const focusableElements = await page.$$eval('button, [href], input, select, textarea, [tabindex]:not([tabindex="-1"])', elements => {
                return elements.map(el => ({
                  tagName: el.tagName,
                  id: el.id,
                  className: el.className,
                  tabIndex: el.tabIndex,
                  textContent: el.textContent ? el.textContent.trim().substring(0, 50) : ''
                }));
              });
              
              console.log(`Found ${focusableElements.length} focusable elements`);
              
              // Test each focusable element (limit to 20 for performance)
              const elementsToTest = Math.min(focusableElements.length, 20);
              for (let i = 0; i < elementsToTest; i++) {
                await page.keyboard.press('Tab');
                
                const activeElement = await page.evaluate(() => {
                  const el = document.activeElement;
                  if (!el) return null;
                  
                  const computedStyle = window.getComputedStyle(el);
                  const pseudoStyle = window.getComputedStyle(el, ':focus');
                  
                  return {
                    tagName: el.tagName,
                    id: el.id,
                    className: el.className,
                    textContent: el.textContent ? el.textContent.trim().substring(0, 30) : '',
                    hasVisibleFocus: (
                      computedStyle.outline !== 'none' ||
                      computedStyle.outlineWidth !== '0px' ||
                      computedStyle.outlineStyle !== 'none' ||
                      computedStyle.boxShadow !== 'none' ||
                      pseudoStyle.outline !== 'none' ||
                      pseudoStyle.outlineWidth !== '0px' ||
                      pseudoStyle.boxShadow !== 'none'
                    )
                  };
                });
                
                if (activeElement && !activeElement.hasVisibleFocus) {
                  issues.push({
                    type: 'keyboard-navigation',
                    severity: 'moderate',
                    message: `Element ${activeElement.tagName} lacks visible focus indicator`,
                    element: activeElement
                  });
                }
              }
              
              // Test Enter/Space key activation on buttons
              console.log('Testing button activation...');
              const buttonElements = await page.$$('button');
              if (buttonElements.length > 0) {
                const button = buttonElements[0];
                await button.focus();
                
                // Test if button responds to Enter key
                const enterResponse = await page.evaluate(() => {
                  return new Promise(resolve => {
                    const btn = document.activeElement;
                    if (!btn || btn.tagName !== 'BUTTON') {
                      resolve(false);
                      return;
                    }
                    
                    let activated = false;
                    const clickHandler = () => { activated = true; };
                    
                    btn.addEventListener('click', clickHandler);
                    
                    // Simulate Enter key press
                    const enterEvent = new KeyboardEvent('keydown', { 
                      key: 'Enter', 
                      code: 'Enter',
                      keyCode: 13,
                      which: 13,
                      bubbles: true,
                      cancelable: true
                    });
                    
                    btn.dispatchEvent(enterEvent);
                    
                    setTimeout(() => {
                      btn.removeEventListener('click', clickHandler);
                      resolve(activated);
                    }, 100);
                  });
                });
                
                if (!enterResponse) {
                  issues.push({
                    type: 'keyboard-navigation',
                    severity: 'serious',
                    message: 'Button does not respond to Enter key activation',
                    element: { tagName: 'BUTTON' }
                  });
                }
              }
              
              // Test skip links
              console.log('Testing skip links...');
              const skipLinks = await page.$$eval('a[href^="#"]', links => {
                return links.filter(link => {
                  const text = link.textContent.toLowerCase();
                  return text.includes('skip') || text.includes('main');
                }).length;
              });
              
              if (skipLinks === 0) {
                issues.push({
                  type: 'keyboard-navigation',
                  severity: 'moderate',
                  message: 'No skip links found for keyboard navigation',
                  element: null
                });
              }
              
            } catch (error) {
              console.error('Keyboard navigation test error:', error);
              issues.push({
                type: 'keyboard-navigation',
                severity: 'critical',
                message: `Keyboard navigation test failed: ${error.message}`,
                element: null
              });
            }
            
            await browser.close();
            
            writeFileSync('accessibility-reports/keyboard-navigation.json', 
              JSON.stringify(issues, null, 2));
            
            console.log(`Keyboard navigation test completed. Found ${issues.length} issues.`);
            return issues.length;
          }

          testKeyboardNavigation().then(count => {
            console.log(`Found ${count} keyboard navigation issues`);
            process.exit(0);
          }).catch(err => {
            console.error('Keyboard test error:', err);
            process.exit(1);
          });
          EOF

      - name: Create Puppeteer comprehensive test script
        run: |
          cat > puppeteer-tests.cjs << 'EOF'
          const puppeteer = require('puppeteer');
          const { writeFileSync } = require('fs');

          (async () => {
            const browser = await puppeteer.launch({ headless: true, args: ['--no-sandbox','--disable-dev-shm-usage'] });
            const page = await browser.newPage();
            const issues = [];
            const targetUrl = process.env.TARGET_URL || '$TARGET_URL';
            await page.goto(targetUrl, { waitUntil: 'networkidle0', timeout: 30000 });
            // Keyboard navigation tests
            const focusable = await page.$$eval('button, [href], input, select, textarea, [tabindex]:not([tabindex="-1"])', els => els.map(el=>({ tag: el.tagName, id: el.id, text: el.textContent?.trim().slice(0,30) })));
            for(const el of focusable.slice(0,20)){
              await page.keyboard.press('Tab');
              const active = await page.evaluate(() => document.activeElement && document.activeElement.tagName);
              if (!active) issues.push({ type: 'keyboard-navigation', severity: 'moderate', message: 'Tab did not focus an element' });
            }
            // Screen reader landmark and heading checks
            const landmarks = await page.$$eval('[role="main"], main', els=>els.length);
            if(landmarks===0) issues.push({ type:'screen-reader', severity:'moderate', message:'No main landmark found' });
            const headings = await page.$$eval('h1, h2, h3, h4, h5, h6', h=>h.length);
            if(headings===0) issues.push({ type:'screen-reader', severity:'moderate', message:'No headings found' });
            writeFileSync('accessibility-reports/puppeteer-issues.json', JSON.stringify(issues,null,2));
            await browser.close();
          })().catch(err=>process.exit(1));
          EOF
          
      - name: Run pa11y accessibility scan (HTML report)
        run: |
          echo "Running pa11y scan for HTML report..."
          echo "DEBUG: pa11y version:"
          pa11y --version
          echo "DEBUG: Target URL: $TARGET_URL"
          pa11y $TARGET_URL --reporter html --config pa11y.json > accessibility-reports/pa11y-report.html || true
          echo "DEBUG: pa11y HTML scan completed, checking file size:"
          ls -la accessibility-reports/pa11y-report.html || echo "HTML report not found"
          
      - name: Run pa11y accessibility scan (JSON report)
        run: |
          echo "Running pa11y scan for JSON report..."
          pa11y $TARGET_URL --reporter json --config pa11y.json --include-warnings --include-notices > accessibility-reports/pa11y-report.json || true
          echo "DEBUG: pa11y JSON scan completed, checking content:"
          echo "File size: $(wc -c < accessibility-reports/pa11y-report.json 2>/dev/null || echo '0') bytes"
          echo "First few lines of JSON:"
          head -5 accessibility-reports/pa11y-report.json 2>/dev/null || echo "JSON report not found or empty"
          
      - name: Run pa11y accessibility scan (CSV report)
        run: |
          echo "Running pa11y scan for CSV report..."
          pa11y $TARGET_URL --reporter csv --config pa11y.json --include-warnings --include-notices > accessibility-reports/pa11y-report.csv || true
          echo "DEBUG: pa11y CSV scan completed, checking content:"
          echo "File size: $(wc -c < accessibility-reports/pa11y-report.csv 2>/dev/null || echo '0') bytes"
          echo "CSV content preview:"
          head -3 accessibility-reports/pa11y-report.csv 2>/dev/null || echo "CSV report not found or empty"
          
      - name: Run axe-core accessibility scan
        run: |
          echo "Running axe-core scan..."
          npx axe $TARGET_URL \
            --save accessibility-reports/axe-report.json \
            --timeout 30000 \
            --chrome-options="no-sandbox,disable-dev-shm-usage" || true
            
      - name: Run combined Lighthouse accessibility audits
        run: |
          echo "Running combined Lighthouse accessibility audits (desktop + mobile)..."
          lighthouse $TARGET_URL \
            --only-categories=accessibility \
            --output=json \
            --output-path=accessibility-reports/lighthouse-accessibility-desktop.json \
            --chrome-flags="--headless --no-sandbox --disable-dev-shm-usage" \
            --max-wait-for-load=30000 || true
          lighthouse $TARGET_URL \
            --only-categories=accessibility \
            --emulated-form-factor=mobile \
            --output=json \
            --output-path=accessibility-reports/lighthouse-accessibility-mobile.json \
            --chrome-flags="--headless --no-sandbox --disable-dev-shm-usage" \
            --max-wait-for-load=30000 || true

      - name: Run keyboard navigation tests
        run: |
          echo "Running keyboard navigation tests..."
          node keyboard-test.cjs || true

      - name: Run Puppeteer comprehensive tests
        run: |
          echo "Running Puppeteer comprehensive tests..."
          node puppeteer-tests.cjs || true

      - name: Create baseline tracking metadata
        run: |
          cat > accessibility-reports/baseline-metadata.json << EOF
          {
            "scan_date": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
            "workflow_run_id": "${{ github.run_id }}",
            "workflow_run_number": "${{ github.run_number }}",
            "repository": "${{ github.repository }}",
            "target_url": "$TARGET_URL",
            "commit_sha": "${{ github.sha }}",
            "baseline_established": true
          }
          EOF

      - name: Create issue summary
        run: |
          # Calculate total issues found for reporting
          AXCORE_ISSUES=$(jq 'if type=="array" then .[0].violations else .violations end | length' accessibility-reports/axe-report.json 2>/dev/null || echo 0)
          PA11Y_ISSUES=$(jq 'length' accessibility-reports/pa11y-report.json 2>/dev/null || echo 0)
          KEYBOARD_ISSUES=$(jq 'length' accessibility-reports/keyboard-navigation.json 2>/dev/null || echo 0)
          SCREENREADER_ISSUES=$(jq 'length' accessibility-reports/screen-reader.json 2>/dev/null || echo 0)
          
          TOTAL_ISSUES=$((AXCORE_ISSUES + PA11Y_ISSUES + KEYBOARD_ISSUES + SCREENREADER_ISSUES))
          
          # Store issue summary for manual GitHub issue creation
          cat > accessibility-reports/issue-summary.json << EOF
          {
            "total_issues": ${TOTAL_ISSUES},
            "breakdown": {
              "axcore_issues": ${AXCORE_ISSUES},
              "pa11y_issues": ${PA11Y_ISSUES},
              "keyboard_issues": ${KEYBOARD_ISSUES},
              "screenreader_issues": ${SCREENREADER_ISSUES}
            },
            "scan_date": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
            "workflow_run_number": "${{ github.run_number }}",
            "workflow_run_id": "${{ github.run_id }}",
            "target_url": "$TARGET_URL"
          }
          EOF
          
          echo "Created issue summary with $TOTAL_ISSUES total issues"
          echo "- Axe-core issues: $AXCORE_ISSUES"
          echo "- Pa11y issues: $PA11Y_ISSUES"
          echo "- Keyboard issues: $KEYBOARD_ISSUES"
          echo "- Screen reader issues: $SCREENREADER_ISSUES"

      - name: Generate comprehensive summary report
        run: |
          echo "# 🛠️ Accessibility Analysis Report" > accessibility-reports/README.md
          echo "" >> accessibility-reports/README.md
          echo "**Scan Date:** $(date)" >> accessibility-reports/README.md
          echo "**Target URL:** $TARGET_URL" >> accessibility-reports/README.md
          echo "**Standards:** WCAG 2.1 AA" >> accessibility-reports/README.md
          echo "" >> accessibility-reports/README.md
          
          # Initialize counters and arrays for prioritization
          CRITICAL_ISSUES=0
          HIGH_PRIORITY=0
          MEDIUM_PRIORITY=0
          LOW_PRIORITY=0
          
          echo "## 🎯 Issue Summary and Action Plan" >> accessibility-reports/README.md
          echo "" >> accessibility-reports/README.md
          
          # Extract and prioritize axe-core violations (most reliable)
          if [ -f accessibility-reports/axe-report.json ]; then
            echo "### 🚨 Critical Issues (Fix First)" >> accessibility-reports/README.md
            echo "" >> accessibility-reports/README.md
            echo "These are WCAG violations that significantly impact user experience:" >> accessibility-reports/README.md
            echo "" >> accessibility-reports/README.md
            
            # Extract critical violations with specific fix guidance
            cat accessibility-reports/axe-report.json | jq -r '
              if type == "array" then .[0].violations else .violations end |
              .[] |
              "#### \(.id | gsub("-"; " ") | ascii_upcase)
              **Impact:** \(.impact // "Unknown")
              **Description:** \(.description)
              **How to fix:** \(.help)
              **Elements affected:** \(.nodes | length)
              **WCAG Reference:** \(.tags | map(select(test("wcag"))) | join(", "))
              
              "
            ' 2>/dev/null >> accessibility-reports/README.md || echo "Could not parse axe-core violations" >> accessibility-reports/README.md
            
            CRITICAL_ISSUES=$(cat accessibility-reports/axe-report.json | jq -r 'if type == "array" then .[0].violations else .violations end | length' 2>/dev/null || echo "0")
          fi
          
          # Extract Lighthouse structural issues
          if [ -f accessibility-reports/lighthouse-accessibility-desktop.json ]; then
            echo "### 🏗️ Structural Issues (High Priority)" >> accessibility-reports/README.md
            echo "" >> accessibility-reports/README.md
            echo "These foundational issues affect screen reader navigation:" >> accessibility-reports/README.md
            echo "" >> accessibility-reports/README.md
            
            # Check for landmark-one-main
            if cat accessibility-reports/lighthouse-accessibility-desktop.json | jq -r '.audits["landmark-one-main"].scoreDisplayMode' | grep -q "notApplicable"; then
              echo "#### ADD MAIN LANDMARK" >> accessibility-reports/README.md
              echo "**Issue:** Your page lacks a \`<main>\` landmark" >> accessibility-reports/README.md
              echo "**Fix:** Wrap your primary content in a \`<main>\` element" >> accessibility-reports/README.md
              echo "\`\`\`jsx" >> accessibility-reports/README.md
              echo "// In your App.jsx:" >> accessibility-reports/README.md
              echo "<main>" >> accessibility-reports/README.md
              echo "  {/* Your main content components */}" >> accessibility-reports/README.md
              echo "  <StatLeaders />" >> accessibility-reports/README.md
              echo "  <TeamRankings />" >> accessibility-reports/README.md
              echo "  <TournamentBracket />" >> accessibility-reports/README.md
              echo "</main>" >> accessibility-reports/README.md
              echo "\`\`\`" >> accessibility-reports/README.md
              echo "" >> accessibility-reports/README.md
              HIGH_PRIORITY=$((HIGH_PRIORITY + 1))
            fi
            
            # Check for bypass navigation
            if cat accessibility-reports/lighthouse-accessibility-desktop.json | jq -r '.audits.bypass.scoreDisplayMode' | grep -q "notApplicable"; then
              echo "#### ADD SKIP NAVIGATION" >> accessibility-reports/README.md
              echo "**Issue:** No way for keyboard users to skip repetitive navigation" >> accessibility-reports/README.md
              echo "**Fix:** Add a skip link at the top of your page" >> accessibility-reports/README.md
              echo "\`\`\`jsx" >> accessibility-reports/README.md
              echo "// Add this as the first element in App.jsx:" >> accessibility-reports/README.md
              echo "<a href=\"#main-content\" className=\"skip-link\">" >> accessibility-reports/README.md
              echo "  Skip to main content" >> accessibility-reports/README.md
              echo "</a>" >> accessibility-reports/README.md
              echo "<main id=\"main-content\">" >> accessibility-reports/README.md
              echo "  {/* Your content */}" >> accessibility-reports/README.md
              echo "</main>" >> accessibility-reports/README.md
              echo "\`\`\`" >> accessibility-reports/README.md
              echo "" >> accessibility-reports/README.md
              echo "Add this CSS:" >> accessibility-reports/README.md
              echo "\`\`\`css" >> accessibility-reports/README.md
              echo ".skip-link {" >> accessibility-reports/README.md
              echo "  position: absolute;" >> accessibility-reports/README.md
              echo "  top: -40px;" >> accessibility-reports/README.md
              echo "  left: 6px;" >> accessibility-reports/README.md
              echo "  background: #000;" >> accessibility-reports/README.md
              echo "  color: #fff;" >> accessibility-reports/README.md
              echo "  padding: 8px;" >> accessibility-reports/README.md
              echo "  text-decoration: none;" >> accessibility-reports/README.md
              echo "  z-index: 1000;" >> accessibility-reports/README.md
              echo "}" >> accessibility-reports/README.md
              echo ".skip-link:focus { top: 6px; }" >> accessibility-reports/README.md
              echo "\`\`\`" >> accessibility-reports/README.md
              echo "" >> accessibility-reports/README.md
              HIGH_PRIORITY=$((HIGH_PRIORITY + 1))
            fi
          fi
          
          # Analyze pa11y issues for common patterns
          if [ -f accessibility-reports/pa11y-report.json ]; then
            PA11Y_COUNT=$(cat accessibility-reports/pa11y-report.json | jq '. | length' 2>/dev/null || echo "0")
            
            if [ "$PA11Y_COUNT" -gt "0" ]; then
              echo "### 📝 Content Quality Issues (Medium Priority)" >> accessibility-reports/README.md
              echo "" >> accessibility-reports/README.md
              echo "**Found:** $PA11Y_COUNT content and markup issues" >> accessibility-reports/README.md
              echo "" >> accessibility-reports/README.md
              echo "**Common fixes needed:**" >> accessibility-reports/README.md
              echo "- Add \`alt\` attributes to images" >> accessibility-reports/README.md
              echo "- Ensure proper heading hierarchy (h1 → h2 → h3)" >> accessibility-reports/README.md
              echo "- Add labels to form inputs" >> accessibility-reports/README.md
              echo "- Improve color contrast ratios" >> accessibility-reports/README.md
              echo "" >> accessibility-reports/README.md
              echo "📊 **Detailed issues:** See \`pa11y-report.html\` for specific elements and locations" >> accessibility-reports/README.md
              echo "" >> accessibility-reports/README.md
              MEDIUM_PRIORITY=$PA11Y_COUNT
            fi
          fi
          
          # Add Playwright test results analysis
          if [ -f accessibility-reports/playwright-report.json ]; then
            echo "### 🎭 Playwright Test Results" >> accessibility-reports/README.md
            echo "" >> accessibility-reports/README.md
            echo "Comprehensive end-to-end accessibility testing completed:" >> accessibility-reports/README.md
            echo "" >> accessibility-reports/README.md
            PLAYWRIGHT_TESTS=$(cat accessibility-reports/playwright-report.json | jq '.suites[0].specs | length' 2>/dev/null || echo "0")
            PLAYWRIGHT_PASSED=$(cat accessibility-reports/playwright-report.json | jq '[.suites[0].specs[].tests[] | select(.results[0].status == "passed")] | length' 2>/dev/null || echo "0")
            PLAYWRIGHT_FAILED=$(cat accessibility-reports/playwright-report.json | jq '[.suites[0].specs[].tests[] | select(.results[0].status == "failed")] | length' 2>/dev/null || echo "0")
            echo "- **Total tests:** $PLAYWRIGHT_TESTS" >> accessibility-reports/README.md
            echo "- **Passed:** $PLAYWRIGHT_PASSED" >> accessibility-reports/README.md
            echo "- **Failed:** $PLAYWRIGHT_FAILED" >> accessibility-reports/README.md
            echo "- **Test artifacts:** Check playwright-report directory for detailed results" >> accessibility-reports/README.md
            echo "" >> accessibility-reports/README.md
          fi
          
          # Summary and next steps
          TOTAL_ISSUES=$((CRITICAL_ISSUES + HIGH_PRIORITY + MEDIUM_PRIORITY))
          
          echo "## ✅ Implementation Roadmap" >> accessibility-reports/README.md
          echo "" >> accessibility-reports/README.md
          echo "**Phase 1: Critical Fixes** (Est. 2-4 hours)" >> accessibility-reports/README.md
          echo "- Fix $CRITICAL_ISSUES WCAG violations (see above)" >> accessibility-reports/README.md
          echo "- Add main landmark and skip navigation ($HIGH_PRIORITY structural fixes)" >> accessibility-reports/README.md
          echo "" >> accessibility-reports/README.md
          echo "**Phase 2: Content Quality** (Est. 4-8 hours)" >> accessibility-reports/README.md
          echo "- Address $MEDIUM_PRIORITY content and markup issues" >> accessibility-reports/README.md
          echo "- Review pa11y-report.html for specific element fixes" >> accessibility-reports/README.md
          echo "" >> accessibility-reports/README.md
          echo "**Phase 3: Validation** (Est. 1-2 hours)" >> accessibility-reports/README.md
          echo "- Re-run accessibility scan" >> accessibility-reports/README.md
          echo "- Test with screen reader (NVDA or VoiceOver)" >> accessibility-reports/README.md
          echo "- Validate keyboard navigation" >> accessibility-reports/README.md
          echo "" >> accessibility-reports/README.md
          
          echo "## 🔧 Quick Component Fixes" >> accessibility-reports/README.md
          echo "" >> accessibility-reports/README.md
          echo "Based on your React components, here are likely needed updates:" >> accessibility-reports/README.md
          echo "" >> accessibility-reports/README.md
          echo "### App.jsx" >> accessibility-reports/README.md
          echo "- Wrap content in \`<main>\` element" >> accessibility-reports/README.md
          echo "- Add skip link for keyboard users" >> accessibility-reports/README.md
          echo "- Ensure proper page title" >> accessibility-reports/README.md
          echo "" >> accessibility-reports/README.md
          echo "### StatLeaders.jsx, TeamRankings.jsx, TournamentBracket.jsx" >> accessibility-reports/README.md
          echo "- Add proper heading structure (h2, h3)" >> accessibility-reports/README.md
          echo "- Ensure data tables have headers" >> accessibility-reports/README.md
          echo "- Add ARIA labels for complex widgets" >> accessibility-reports/README.md
          echo "" >> accessibility-reports/README.md
          echo "### Scoreboard.jsx" >> accessibility-reports/README.md
          echo "- Add live region for score updates" >> accessibility-reports/README.md
          echo "- Ensure proper labeling of interactive elements" >> accessibility-reports/README.md
          echo "" >> accessibility-reports/README.md
          
          echo "## 📚 Resources" >> accessibility-reports/README.md
          echo "" >> accessibility-reports/README.md
          echo "- [React Accessibility Guide](https://react.dev/learn/accessibility)" >> accessibility-reports/README.md
          echo "- [WCAG 2.1 Quick Reference](https://www.w3.org/WAI/WCAG21/quickref/)" >> accessibility-reports/README.md
          echo "- [axe-react Development Tools](https://github.com/dequelabs/axe-core-npm/tree/develop/packages/react)" >> accessibility-reports/README.md
          echo "- [Screen Reader Testing Guide](https://webaim.org/articles/screenreader_testing/)" >> accessibility-reports/README.md
          
      - name: List generated reports
        run: |
          echo "Generated accessibility reports:"
          ls -la accessibility-reports/
          
          # Verify all expected files exist
          echo ""
          echo "=== ARTIFACT CONTENT VERIFICATION ==="
          echo "Checking for required files before upload:"
          
          # Check each expected file
          FILES_FOUND=0
          EXPECTED_FILES=0
          
          # Core reports
          EXPECTED_FILES=$((EXPECTED_FILES + 1))
          if [ -f accessibility-reports/axe-report.json ]; then
            echo "✅ axe-report.json ($(wc -c < accessibility-reports/axe-report.json) bytes)"
            FILES_FOUND=$((FILES_FOUND + 1))
          else
            echo "❌ axe-report.json missing"
          fi
          
          EXPECTED_FILES=$((EXPECTED_FILES + 1))
          if [ -f accessibility-reports/pa11y-report.json ]; then
            echo "✅ pa11y-report.json ($(wc -c < accessibility-reports/pa11y-report.json) bytes)"
            FILES_FOUND=$((FILES_FOUND + 1))
          else
            echo "❌ pa11y-report.json missing"
          fi
          
          EXPECTED_FILES=$((EXPECTED_FILES + 1))
          if [ -f accessibility-reports/pa11y-report.html ]; then
            echo "✅ pa11y-report.html ($(wc -c < accessibility-reports/pa11y-report.html) bytes)"
            FILES_FOUND=$((FILES_FOUND + 1))
          else
            echo "❌ pa11y-report.html missing"
          fi
          
          EXPECTED_FILES=$((EXPECTED_FILES + 1))
          if [ -f accessibility-reports/lighthouse-accessibility-desktop.json ]; then
            echo "✅ lighthouse-accessibility-desktop.json ($(wc -c < accessibility-reports/lighthouse-accessibility-desktop.json) bytes)"
            FILES_FOUND=$((FILES_FOUND + 1))
          else
            echo "❌ lighthouse-accessibility-desktop.json missing"
          fi
          
          # New test reports
          EXPECTED_FILES=$((EXPECTED_FILES + 1))
          if [ -f accessibility-reports/keyboard-navigation.json ]; then
            echo "✅ keyboard-navigation.json ($(wc -c < accessibility-reports/keyboard-navigation.json) bytes)"
            FILES_FOUND=$((FILES_FOUND + 1))
          else
            echo "❌ keyboard-navigation.json missing"
          fi
          
          EXPECTED_FILES=$((EXPECTED_FILES + 1))
          if [ -f accessibility-reports/screen-reader.json ]; then
            echo "✅ screen-reader.json ($(wc -c < accessibility-reports/screen-reader.json) bytes)"
            FILES_FOUND=$((FILES_FOUND + 1))
          else
            echo "❌ screen-reader.json missing"
          fi
          
          # Playwright reports (optional since browser installation may fail)
          if [ -f accessibility-reports/playwright-report.json ]; then
            echo "✅ playwright-report.json ($(wc -c < accessibility-reports/playwright-report.json) bytes)"
            echo "📊 Playwright tests completed successfully"
          else
            echo "ℹ️  playwright-report.json not found (browser installation may have failed)"
          fi
          
          # Generated files
          EXPECTED_FILES=$((EXPECTED_FILES + 1))
          if [ -f accessibility-reports/README.md ]; then
            echo "✅ README.md ($(wc -c < accessibility-reports/README.md) bytes)"
            FILES_FOUND=$((FILES_FOUND + 1))
          else
            echo "❌ README.md missing"
          fi
          
          EXPECTED_FILES=$((EXPECTED_FILES + 1))
          if [ -f accessibility-reports/issue-summary.json ]; then
            echo "✅ issue-summary.json ($(wc -c < accessibility-reports/issue-summary.json) bytes)"
            FILES_FOUND=$((FILES_FOUND + 1))
          else
            echo "❌ issue-summary.json missing"
          fi
          
          EXPECTED_FILES=$((EXPECTED_FILES + 1))
          if [ -f accessibility-reports/baseline-metadata.json ]; then
            echo "✅ baseline-metadata.json ($(wc -c < accessibility-reports/baseline-metadata.json) bytes)"
            FILES_FOUND=$((FILES_FOUND + 1))
          else
            echo "❌ baseline-metadata.json missing"
          fi
          
          echo ""
          echo "=== SUMMARY ==="
          echo "Files found: $FILES_FOUND / $EXPECTED_FILES"
          echo "Directory size: $(du -sh accessibility-reports/ | cut -f1)"
          
          if [ "$FILES_FOUND" -eq "0" ]; then
            echo "🚨 CRITICAL: No files found - artifact upload will fail!"
            echo "Creating minimal artifact to prevent upload failure..."
            echo "No accessibility reports were generated due to tool failures." > accessibility-reports/error.txt
            echo "Check the workflow logs for specific error details." >> accessibility-reports/error.txt
          elif [ "$FILES_FOUND" -lt "$EXPECTED_FILES" ]; then
            echo "⚠️  WARNING: Some files missing - artifact will be incomplete"
          else
            echo "✅ SUCCESS: All expected files present"
          fi
          
      - name: Upload accessibility reports as baseline
        uses: actions/upload-artifact@v4
        with:
          name: accessibility-evaluation
          path: accessibility-reports/
          retention-days: 90

      - name: Check if issues need to be created
        id: check_issues
        run: |
          # Calculate total issues found for reporting
          AXCORE_ISSUES=$(jq 'if type=="array" then .[0].violations else .violations end | length' accessibility-reports/axe-report.json 2>/dev/null || echo 0)
          PA11Y_ISSUES=$(jq 'length' accessibility-reports/pa11y-report.json 2>/dev/null || echo 0)
          KEYBOARD_ISSUES=$(jq 'length' accessibility-reports/keyboard-navigation.json 2>/dev/null || echo 0)
          SCREENREADER_ISSUES=$(jq 'length' accessibility-reports/screen-reader.json 2>/dev/null || echo 0)
          
          TOTAL_ISSUES=$((AXCORE_ISSUES + PA11Y_ISSUES + KEYBOARD_ISSUES + SCREENREADER_ISSUES))
          
          echo "total_issues=$TOTAL_ISSUES" >> $GITHUB_OUTPUT
          echo "axcore_issues=$AXCORE_ISSUES" >> $GITHUB_OUTPUT
          echo "pa11y_issues=$PA11Y_ISSUES" >> $GITHUB_OUTPUT
          echo "keyboard_issues=$KEYBOARD_ISSUES" >> $GITHUB_OUTPUT
          echo "screenreader_issues=$SCREENREADER_ISSUES" >> $GITHUB_OUTPUT
          
          # Store issue summary for manual GitHub issue creation
          cat > accessibility-reports/issue-summary.json << EOF
          {
            "total_issues": ${TOTAL_ISSUES},
            "breakdown": {
              "axcore_issues": ${AXCORE_ISSUES},
              "pa11y_issues": ${PA11Y_ISSUES},
              "keyboard_issues": ${KEYBOARD_ISSUES},
              "screenreader_issues": ${SCREENREADER_ISSUES}
            },
            "scan_date": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
            "workflow_run_number": "${{ github.run_number }}",
            "workflow_run_id": "${{ github.run_id }}",
            "target_url": "$TARGET_URL"
          }
          EOF

      - name: Create workflow summary
        if: always()
        run: |
          echo "# 🔍 Accessibility Scan Summary" > scan-summary.txt
          echo "" >> scan-summary.txt
          echo "**Scan completed:** $(date)" >> scan-summary.txt
          echo "**Target URL:** $TARGET_URL" >> scan-summary.txt
          echo "**Workflow Run:** ${{ github.run_number }}" >> scan-summary.txt
          echo "" >> scan-summary.txt
          
          TOTAL_ISSUES=0
          CRITICAL_COUNT=0
          HIGH_PRIORITY_COUNT=0
          MEDIUM_PRIORITY_COUNT=0
          PA11Y_COUNT=0
          KEYBOARD_COUNT=0
          SCREENREADER_COUNT=0
          
          # Check axe-core results for critical issues
          if [ -f accessibility-reports/axe-report.json ]; then
            CRITICAL_COUNT=$(cat accessibility-reports/axe-report.json | jq -r 'if type == "array" then .[0].violations else .violations end | length' 2>/dev/null || echo "0")
            if [ "$CRITICAL_COUNT" -gt "0" ]; then
              echo "🚨 **CRITICAL:** $CRITICAL_COUNT WCAG violations require immediate fixes" >> scan-summary.txt
            else
              echo "✅ **WCAG Compliance:** No critical violations found" >> scan-summary.txt
            fi
            TOTAL_ISSUES=$((TOTAL_ISSUES + CRITICAL_COUNT))
          fi
          
          # Check Lighthouse for structural issues (HIGH PRIORITY)
          if [ -f accessibility-reports/lighthouse-accessibility-desktop.json ]; then
            LIGHTHOUSE_SCORE=$(cat accessibility-reports/lighthouse-accessibility-desktop.json | jq '.categories.accessibility.score * 100' 2>/dev/null || echo "0")
            
            # Count structural issues
            LIGHTHOUSE_STRUCTURAL=0
            if cat accessibility-reports/lighthouse-accessibility-desktop.json | jq -r '.audits["landmark-one-main"].scoreDisplayMode' | grep -q "notApplicable"; then
              LIGHTHOUSE_STRUCTURAL=$((LIGHTHOUSE_STRUCTURAL + 1))
            fi
            if cat accessibility-reports/lighthouse-accessibility-desktop.json | jq -r '.audits.bypass.scoreDisplayMode' | grep -q "notApplicable"; then
              LIGHTHOUSE_STRUCTURAL=$((LIGHTHOUSE_STRUCTURAL + 1))
            fi
            
            if [ "$LIGHTHOUSE_STRUCTURAL" -gt "0" ]; then
              echo "🏗️ **HIGH PRIORITY:** $LIGHTHOUSE_STRUCTURAL structural foundation issues" >> scan-summary.txt
              HIGH_PRIORITY_COUNT=$LIGHTHOUSE_STRUCTURAL
            fi
            
            echo "💡 **Lighthouse Score:** $LIGHTHOUSE_SCORE%" >> scan-summary.txt
            TOTAL_ISSUES=$((TOTAL_ISSUES + LIGHTHOUSE_STRUCTURAL))
          fi
          
          # Check keyboard navigation issues (HIGH PRIORITY)
          if [ -f accessibility-reports/keyboard-navigation.json ]; then
            KEYBOARD_COUNT=$(cat accessibility-reports/keyboard-navigation.json | jq '. | length' 2>/dev/null || echo "0")
            if [ "$KEYBOARD_COUNT" -gt "0" ]; then
              echo "⌨️ **HIGH PRIORITY:** $KEYBOARD_COUNT keyboard navigation issues" >> scan-summary.txt
              HIGH_PRIORITY_COUNT=$((HIGH_PRIORITY_COUNT + KEYBOARD_COUNT))
            else
              echo "✅ **Keyboard Navigation:** All interactive elements accessible" >> scan-summary.txt
            fi
            TOTAL_ISSUES=$((TOTAL_ISSUES + KEYBOARD_COUNT))
          fi
          
          # Check screen reader issues (HIGH PRIORITY)
          if [ -f accessibility-reports/screen-reader.json ]; then
            SCREENREADER_COUNT=$(cat accessibility-reports/screen-reader.json | jq '. | length' 2>/dev/null || echo "0")
            if [ "$SCREENREADER_COUNT" -gt "0" ]; then
              echo "🔊 **HIGH PRIORITY:** $SCREENREADER_COUNT screen reader compatibility issues" >> scan-summary.txt
              HIGH_PRIORITY_COUNT=$((HIGH_PRIORITY_COUNT + SCREENREADER_COUNT))
            else
              echo "✅ **Screen Reader Support:** Proper landmarks and labels detected" >> scan-summary.txt
            fi
            TOTAL_ISSUES=$((TOTAL_ISSUES + SCREENREADER_COUNT))
          fi
          
          # Check pa11y for content issues (MEDIUM PRIORITY)
          if [ -f accessibility-reports/pa11y-report.json ]; then
            PA11Y_COUNT=$(cat accessibility-reports/pa11y-report.json | jq '. | length' 2>/dev/null || echo "0")
            if [ "$PA11Y_COUNT" -gt "0" ]; then
              echo "📝 **MEDIUM PRIORITY:** $PA11Y_COUNT content and markup issues" >> scan-summary.txt
              MEDIUM_PRIORITY_COUNT=$PA11Y_COUNT
            else
              echo "✅ **Content Quality:** No markup issues detected" >> scan-summary.txt
            fi
            TOTAL_ISSUES=$((TOTAL_ISSUES + PA11Y_COUNT))
          fi
          
          echo "" >> scan-summary.txt
          echo "## 📊 Comprehensive Issue Breakdown" >> scan-summary.txt
          echo "" >> scan-summary.txt
          echo "| Priority | Category | Issues | Impact |" >> scan-summary.txt
          echo "|----------|----------|--------|--------|" >> scan-summary.txt
          echo "| 🚨 Critical | WCAG Violations | $CRITICAL_COUNT | Blocks users with disabilities |" >> scan-summary.txt
          echo "| 🏗️ High | Structural Issues | $((LIGHTHOUSE_STRUCTURAL)) | Affects screen reader navigation |" >> scan-summary.txt
          echo "| ⌨️ High | Keyboard Navigation | $KEYBOARD_COUNT | Blocks keyboard-only users |" >> scan-summary.txt
          echo "| 🔊 High | Screen Reader Support | $SCREENREADER_COUNT | Impacts assistive technology |" >> scan-summary.txt
          echo "| 📝 Medium | Content & Markup | $PA11Y_COUNT | General accessibility quality |" >> scan-summary.txt
          echo "" >> scan-summary.txt
          echo "**Total Issues**: $TOTAL_ISSUES" >> scan-summary.txt
          echo "" >> scan-summary.txt
          
          # Action plan with all test results
          if [ "$TOTAL_ISSUES" -eq "0" ]; then
            echo "🎉 **CONGRATULATIONS!** Your app passes all accessibility tests!" >> scan-summary.txt
            echo "" >> scan-summary.txt
            echo "✅ **WCAG 2.1 AA Compliance**: No violations detected" >> scan-summary.txt
            echo "✅ **Keyboard Navigation**: All elements accessible" >> scan-summary.txt
            echo "✅ **Screen Reader Support**: Proper structure and labels" >> scan-summary.txt
            echo "✅ **Content Quality**: No markup issues found" >> scan-summary.txt
            echo "✅ **Structural Foundation**: Landmarks and navigation present" >> scan-summary.txt
          else
            echo "## 🎯 Priority-Based Action Plan" >> scan-summary.txt
            echo "" >> scan-summary.txt
            
            if [ "$CRITICAL_COUNT" -gt "0" ]; then
              echo "### 🚨 Phase 1: Critical WCAG Fixes (⏰ 2-3 hours)" >> scan-summary.txt
              echo "- **$CRITICAL_COUNT WCAG violations** must be fixed immediately" >> scan-summary.txt
              echo "- These directly violate accessibility standards" >> scan-summary.txt
              echo "- See axe-report.json for specific elements and fixes" >> scan-summary.txt
              echo "" >> scan-summary.txt
            fi
            
            if [ "$HIGH_PRIORITY_COUNT" -gt "0" ]; then
              echo "### 🏗️ Phase 2: High Priority Issues (⏰ 2-4 hours)" >> scan-summary.txt
              echo "" >> scan-summary.txt
              
              if [ "$LIGHTHOUSE_STRUCTURAL" -gt "0" ]; then
                echo "**Structural Foundation ($LIGHTHOUSE_STRUCTURAL issues):**" >> scan-summary.txt
                echo "- Add \`<main>\` landmark to App.jsx" >> scan-summary.txt
                echo "- Add skip navigation for keyboard users" >> scan-summary.txt
                echo "- Improves screen reader page navigation" >> scan-summary.txt
                echo "" >> scan-summary.txt
              fi
              
              if [ "$KEYBOARD_COUNT" -gt "0" ]; then
                echo "**Keyboard Navigation ($KEYBOARD_COUNT issues):**" >> scan-summary.txt
                echo "- Add visible focus indicators to interactive elements" >> scan-summary.txt
                echo "- Ensure all buttons respond to Enter/Space keys" >> scan-summary.txt
                echo "- Test tab order flows logically through content" >> scan-summary.txt
                echo "- Critical for users who cannot use a mouse" >> scan-summary.txt
                echo "" >> scan-summary.txt
              fi
              
              if [ "$SCREENREADER_COUNT" -gt "0" ]; then
                echo "**Screen Reader Support ($SCREENREADER_COUNT issues):**" >> scan-summary.txt
                echo "- Fix heading hierarchy (h1 → h2 → h3)" >> scan-summary.txt
                echo "- Add alt text to images" >> scan-summary.txt
                echo "- Add proper form labels" >> scan-summary.txt
                echo "- Add ARIA landmarks for page regions" >> scan-summary.txt
                echo "- Essential for blind and low-vision users" >> scan-summary.txt
                echo "" >> scan-summary.txt
              fi
            fi
            
            if [ "$PA11Y_COUNT" -gt "0" ]; then
              echo "### 📝 Phase 3: Content Quality (⏰ 2-4 hours)" >> scan-summary.txt
              echo "- **$PA11Y_COUNT content and markup issues**" >> scan-summary.txt
              echo "- Review pa11y-report.html for specific element locations" >> scan-summary.txt
              echo "- Focus on images, headings, and form elements" >> scan-summary.txt
              echo "- Improves overall accessibility experience" >> scan-summary.txt
              echo "" >> scan-summary.txt
            fi
            
            echo "### ✅ Phase 4: Validation (⏰ 30 minutes)" >> scan-summary.txt
            echo "- Re-run this accessibility workflow" >> scan-summary.txt
            echo "- Test keyboard navigation manually (Tab through page)" >> scan-summary.txt
            echo "- Test with screen reader if possible (NVDA/VoiceOver)" >> scan-summary.txt
            echo "- Verify all issues are resolved" >> scan-summary.txt
          fi
          
          echo "" >> scan-summary.txt
          echo "📋 **Download complete reports:** \`accessibility-evaluation.zip\`" >> scan-summary.txt
          echo "" >> scan-summary.txt
          echo "## 📊 Complete Test Coverage" >> scan-summary.txt
          echo "" >> scan-summary.txt
          echo "This scan includes comprehensive testing with multiple tools:" >> scan-summary.txt
          echo "- ✅ **WCAG 2.1 AA compliance** (axe-core)" >> scan-summary.txt
          echo "- ✅ **Playwright end-to-end testing** (browser automation)" >> scan-summary.txt
          echo "- ✅ **Keyboard navigation simulation** (custom scripts)" >> scan-summary.txt
          echo "- ✅ **Screen reader compatibility** (ARIA and semantic testing)" >> scan-summary.txt
          echo "- ✅ **Content quality analysis** (pa11y)" >> scan-summary.txt
          echo "- ✅ **Structural foundation audit** (Lighthouse)" >> scan-summary.txt
          echo "- ✅ **Responsive accessibility** (mobile and desktop)" >> scan-summary.txt
          
          echo "" >> scan-summary.txt
          echo "## 🎯 Next Steps" >> scan-summary.txt
          echo "" >> scan-summary.txt
          echo "1. **Download Reports**: Get the \`accessibility-evaluation.zip\` artifact from this workflow run" >> scan-summary.txt
          echo "2. **Review Priorities**: Start with critical WCAG violations (highest impact)" >> scan-summary.txt
          echo "3. **Follow Fix Guide**: Use the README.md in the artifact for detailed guidance" >> scan-summary.txt
          echo "4. **Test Changes**: Re-run this workflow after implementing fixes" >> scan-summary.txt
          echo "5. **Manual Testing**: Supplement with keyboard navigation and screen reader testing" >> scan-summary.txt
          
          echo "" >> scan-summary.txt
          echo "## 📈 Detailed Test Results" >> scan-summary.txt
          echo "" >> scan-summary.txt
          echo "- **🚨 Critical WCAG Violations**: $CRITICAL_COUNT (axe-core scan)" >> scan-summary.txt
          echo "- **🏗️ Structural Foundation Issues**: $LIGHTHOUSE_STRUCTURAL (Lighthouse audit)" >> scan-summary.txt
          echo "- **⌨️ Keyboard Navigation Issues**: $KEYBOARD_COUNT (simulation test)" >> scan-summary.txt
          echo "- **🔊 Screen Reader Support Issues**: $SCREENREADER_COUNT (compatibility test)" >> scan-summary.txt
          echo "- **📝 Content & Markup Issues**: $PA11Y_COUNT (pa11y analysis)" >> scan-summary.txt
          echo "- **💯 Lighthouse Accessibility Score**: $LIGHTHOUSE_SCORE%" >> scan-summary.txt
          echo "" >> scan-summary.txt
          echo "**Total Issues Found**: $TOTAL_ISSUES" >> scan-summary.txt

          # Output to workflow summary
          cat scan-summary.txt >> $GITHUB_STEP_SUMMARY
          
          # Also output to console for debugging
          echo "=== DEVELOPER ACTION SUMMARY ==="
          cat scan-summary.txt
      - name: Create comprehensive Copilot issue summary
        run: |
          # Create comprehensive issue summary for Copilot remediation
          cat > accessibility-reports/copilot-issue-summary.md << 'EOF'
          # 🚨 ACCESSIBILITY REMEDIATION REQUEST - Copy/Paste for GitHub Copilot

          ## Context
          This is a comprehensive accessibility audit of the NCAA D1 Softball WebApp (React/Vite project) that found multiple WCAG 2.1 AA violations and usability issues. Please implement ALL fixes listed below in order of priority.

          **App Structure:**
          - React application using Vite
          - Main components: App.jsx, StatLeaders.jsx, TeamRankings.jsx, TournamentBracket.jsx, Scoreboard.jsx
          - Target URL: https://ncaa-d1-softball.netlify.app/
          - Current Lighthouse Accessibility Score: $(cat accessibility-reports/lighthouse-accessibility.report.json | jq '.categories.accessibility.score * 100' 2>/dev/null || echo "Unknown")%

          ## CRITICAL FIXES REQUIRED (Fix First - 2-3 hours)

          ### 1. Add Main Landmark Structure
          **Issue:** Document lacks main landmark (WCAG violation)
          **Files to modify:** `src/App.jsx`
          **Fix:** Wrap the main content area in a `<main>` element:

          ```jsx
          // In App.jsx, replace the current structure with:
          function App() {
            return (
              <div className="App">
                <header>
                  {/* Any header/navigation content */}
                </header>
                
                <main id="main-content">
                  <h1>NCAA Division I Softball Statistics</h1>
                  
                  {/* All your main content components */}
                  <StatLeaders />
                  <TeamRankings />
                  <TournamentBracket />
                  <Scoreboard />
                </main>
                
                <footer>
                  {/* Any footer content */}
                </footer>
              </div>
            );
          }
          ```

          ### 2. Add Required H1 Heading
          **Issue:** Page lacks a level-one heading (WCAG violation)
          **Files to modify:** `src/App.jsx`
          **Fix:** Add an h1 as the first heading element in main content (see code above)

          ### 3. Add Skip Navigation Link
          **Issue:** No way for keyboard users to skip to main content
          **Files to modify:** `src/App.jsx`, `src/App.css`
          **Fix:** Add skip link at the very beginning of App component:

          ```jsx
          // Add as the FIRST element in App.jsx return statement:
          <a href="#main-content" className="skip-link">
            Skip to main content
          </a>
          ```

          ```css
          /* Add to App.css: */
          .skip-link {
            position: absolute;
            top: -40px;
            left: 6px;
            background: #000;
            color: #fff;
            padding: 8px 16px;
            text-decoration: none;
            z-index: 1000;
            border-radius: 0 0 4px 4px;
            font-weight: bold;
          }
          
          .skip-link:focus {
            top: 6px;
          }
          ```

          ## HIGH PRIORITY FIXES (3-4 hours)

          ### 4. Fix Heading Hierarchy in Components
          **Issue:** Components likely lack proper heading structure
          **Files to modify:** All component files
          **Fix:** Ensure proper heading hierarchy (h1 → h2 → h3):

          ```jsx
          // In StatLeaders.jsx:
          function StatLeaders() {
            return (
              <section>
                <h2>Statistical Leaders</h2>
                <h3>Batting Leaders</h3>
                {/* batting stats */}
                <h3>Pitching Leaders</h3>
                {/* pitching stats */}
              </section>
            );
          }

          // In TeamRankings.jsx:
          function TeamRankings() {
            return (
              <section>
                <h2>Team Rankings</h2>
                {/* rankings content */}
              </section>
            );
          }

          // In TournamentBracket.jsx:
          function TournamentBracket() {
            return (
              <section>
                <h2>Tournament Bracket</h2>
                {/* bracket content */}
              </section>
            );
          }

          // In Scoreboard.jsx:
          function Scoreboard() {
            return (
              <section>
                <h2>Live Scores</h2>
                {/* Add aria-live for score updates */}
                <div aria-live="polite" aria-label="Live score updates">
                  {/* score content */}
                </div>
              </section>
            );
          }
          ```

          ### 5. Add Proper Data Table Structure
          **Issue:** Tables likely lack proper headers and structure
          **Files to modify:** Components that display tabular data
          **Fix:** Ensure all data tables have proper headers:

          ```jsx
          // For any data tables, use this structure:
          <table>
            <caption>Table description for screen readers</caption>
            <thead>
              <tr>
                <th scope="col">Player Name</th>
                <th scope="col">Team</th>
                <th scope="col">Statistic</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td>John Doe</td>
                <td>Example University</td>
                <td>0.350</td>
              </tr>
            </tbody>
          </table>
          ```

          ### 6. Add Focus Management and Keyboard Navigation
          **Issue:** Interactive elements lack visible focus indicators
          **Files to modify:** Component CSS files, `src/index.css`
          **Fix:** Add focus styles for all interactive elements:

          ```css
          /* Add to relevant CSS files: */
          button:focus,
          a:focus,
          input:focus,
          select:focus,
          textarea:focus,
          [tabindex]:focus {
            outline: 2px solid #0066cc;
            outline-offset: 2px;
          }

          /* Ensure buttons are keyboard accessible */
          button {
            cursor: pointer;
          }

          button:focus-visible {
            outline: 2px solid #0066cc;
            outline-offset: 2px;
          }
          ```

          ### 7. Add ARIA Labels and Descriptions
          **Issue:** Interactive elements lack accessible names
          **Files to modify:** All components with interactive elements
          **Fix:** Add appropriate ARIA labels:

          ```jsx
          // For buttons without visible text:
          <button aria-label="View detailed statistics">
            <ChartIcon />
          </button>

          // For form controls:
          <input 
            type="search" 
            aria-label="Search for teams or players"
            placeholder="Search..."
          />

          // For complex widgets:
          <div 
            role="region" 
            aria-labelledby="bracket-heading"
            aria-describedby="bracket-description"
          >
            <h2 id="bracket-heading">Tournament Bracket</h2>
            <p id="bracket-description">Interactive tournament bracket showing game results</p>
          </div>
          ```

          ## MEDIUM PRIORITY FIXES (2-3 hours)

          ### 8. Add Image Alt Text
          **Issue:** Images missing alternative text
          **Files to modify:** Components with images, `public/` assets
          **Fix:** Add descriptive alt text to all images:

          ```jsx
          // For decorative images:
          <img src="softball-bg.jpg" alt="" role="presentation" />

          // For informative images:
          <img src="team-logo.png" alt="University of Example Softball Team Logo" />

          // For the softball icon:
          <img src="softball-icon.svg" alt="Softball" />
          ```

          ### 9. Improve Color Contrast
          **Issue:** Text may not meet WCAG AA contrast requirements (4.5:1)
          **Files to modify:** CSS files
          **Fix:** Ensure all text meets contrast requirements:

          ```css
          /* Check and improve contrast ratios: */
          .text-light-background {
            color: #333333; /* Dark text on light background */
          }

          .text-dark-background {
            color: #ffffff; /* White text on dark background */
          }

          /* For links, ensure 3:1 contrast with surrounding text */
          a {
            color: #0066cc;
            text-decoration: underline;
          }

          a:hover, a:focus {
            color: #004499;
            text-decoration: underline;
          }
          ```

          ### 10. Add Form Labels and Error Handling
          **Issue:** Form inputs lack proper labels
          **Files to modify:** Components with form elements
          **Fix:** Ensure all form inputs have labels:

          ```jsx
          // Proper form structure:
          <form>
            <div>
              <label htmlFor="team-search">Search Teams:</label>
              <input 
                id="team-search"
                type="search"
                name="teamSearch"
                aria-describedby="search-hint"
              />
              <div id="search-hint">Enter team name or abbreviation</div>
            </div>
            
            <div>
              <label htmlFor="season-select">Select Season:</label>
              <select id="season-select" name="season">
                <option value="">Choose a season</option>
                <option value="2024">2024</option>
                <option value="2023">2023</option>
              </select>
            </div>
          </form>
          ```

          ## VALIDATION AND TESTING (30 minutes)

          ### 11. Test Keyboard Navigation
          **Action:** Manually test that all interactive elements are reachable via Tab key
          **Verify:**
          - Tab order flows logically through content
          - All buttons and links are focusable
          - Focus indicators are clearly visible
          - Skip link works (Tab from address bar should show skip link)

          ### 12. Test Screen Reader Compatibility
          **Action:** Test with screen reader (NVDA, JAWS, or VoiceOver)
          **Verify:**
          - All headings are announced in proper order
          - All images have appropriate alt text
          - Form labels are associated with inputs
          - Table headers are announced with data cells

          ### 13. Re-run Accessibility Scan
          **Action:** Run the accessibility workflow again after implementing fixes
          **Target:** Achieve 95+ Lighthouse accessibility score with 0 critical violations

          ## TECHNICAL SPECIFICATIONS

          **Current Issues Found:**
          - $(jq 'if type=="array" then .[0].violations else .violations end | length' accessibility-reports/axe-report.json 2>/dev/null || echo 0) axe-core WCAG violations
          - $(jq 'length' accessibility-reports/pa11y-report.json 2>/dev/null || echo 0) pa11y content issues  
          - $(jq 'length' accessibility-reports/keyboard-navigation.json 2>/dev/null || echo 0) keyboard navigation issues
          - $(jq 'length' accessibility-reports/screen-reader.json 2>/dev/null || echo 0) screen reader compatibility issues

          **Standards Compliance:**
          - Target: WCAG 2.1 Level AA
          - Browser Support: Chrome, Firefox, Safari, Edge
          - Screen Reader Testing: NVDA, VoiceOver, JAWS
          - Keyboard Testing: Tab navigation, Enter/Space activation

          **Files Requiring Changes:**
          - `src/App.jsx` (main structure, skip link, h1)
          - `src/App.css` (skip link styles, focus indicators)
          - `src/components/StatLeaders.jsx` (headings, tables, ARIA)
          - `src/components/TeamRankings.jsx` (headings, tables, ARIA)
          - `src/components/TournamentBracket.jsx` (headings, interactive elements)
          - `src/components/Scoreboard.jsx` (headings, live regions)
          - Component CSS files (focus styles, contrast)
          - `src/index.css` (global accessibility styles)

          **Expected Outcome:**
          - 0 critical WCAG violations
          - 95+ Lighthouse accessibility score
          - Full keyboard navigation support
          - Screen reader compatibility
          - Color contrast compliance
          - Proper semantic structure

          **Testing Commands:**
          ```bash
          # After implementing fixes, test locally:
          npm run dev
          
          # Then run accessibility scan workflow:
          # Go to Actions tab → Comprehensive Web Accessibility Evaluation → Run workflow
          ```

          ## IMPLEMENTATION PRIORITY ORDER

          1. **CRITICAL (Do First):** Add main landmark, h1 heading, skip link (App.jsx + CSS)
          2. **HIGH:** Add proper heading hierarchy to all components  
          3. **HIGH:** Add focus indicators and keyboard navigation support
          4. **HIGH:** Add ARIA labels and semantic structure
          5. **MEDIUM:** Add image alt text and improve color contrast
          6. **MEDIUM:** Fix form labels and table structure
          7. **VALIDATION:** Test keyboard navigation and screen reader compatibility
          8. **VALIDATION:** Re-run accessibility scan to verify 0 critical issues

          **Estimated Total Time:** 6-8 hours
          **Target Result:** 95+ accessibility score, 0 WCAG violations, full keyboard and screen reader support
          EOF

          # Create simplified version for GitHub issue creation
          echo "📋 **Copilot Issue Summary Created:** \`accessibility-reports/copilot-issue-summary.md\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Copy the contents of this file and paste into a new GitHub issue for comprehensive accessibility fixes." >> $GITHUB_STEP_SUMMARY
          
          # Also create a concise version for quick reference
          cat > accessibility-reports/quick-fixes-summary.txt << 'EOF'
          QUICK ACCESSIBILITY FIXES NEEDED:

          🚨 CRITICAL (Fix First):
          1. Add <main> element to App.jsx wrapping all content
          2. Add <h1>NCAA Division I Softball Statistics</h1> as first heading  
          3. Add skip link: <a href="#main-content" className="skip-link">Skip to main content</a>

          🏗️ HIGH PRIORITY:
          4. Add proper heading hierarchy (h2, h3) to all components
          5. Add focus indicators: button:focus { outline: 2px solid #0066cc; }
          6. Add ARIA labels to interactive elements
          7. Structure data tables with <th scope="col"> headers

          📝 MEDIUM PRIORITY:
          8. Add alt text to all images
          9. Improve color contrast ratios (4.5:1 minimum)
          10. Add form labels with htmlFor attributes

          ✅ VALIDATION:
          11. Test Tab navigation through all elements
          12. Re-run accessibility workflow
          13. Target: 0 WCAG violations, 95+ Lighthouse score

          Files to modify: App.jsx, App.css, all component files
          Expected time: 6-8 hours total
          EOF

          echo "## 🎯 Quick Fixes Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          cat accessibility-reports/quick-fixes-summary.txt >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY