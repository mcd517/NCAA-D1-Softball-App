name: Comprehensive Web Accessibility Evaluation

on:
  schedule:
    # Run every Monday at 9:00 AM UTC (weekly)
    - cron: '0 9 * * 1'
  workflow_dispatch: # Allow manual triggering
  
env:
  TARGET_URL: https://ncaa-d1-softball.netlify.app/
  
jobs:
  accessibility-audit:
    runs-on: ubuntu-latest
    name: Comprehensive Accessibility Audit
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Install accessibility testing tools
        run: |
          npm install -g pa11y @axe-core/cli lighthouse
          
      - name: Create reports directory
        run: mkdir -p accessibility-reports
        
      - name: Create pa11y configuration file
        run: |
          cat > pa11y.json << 'EOF'
          {
            "chromeLaunchConfig": {
              "args": [
                "--no-sandbox",
                "--disable-dev-shm-usage",
                "--disable-gpu",
                "--headless"
              ]
            },
            "timeout": 30000,
            "wait": 3000,
            "standard": "WCAG2AA",
            "runners": ["htmlcs"],
            "ignore": [
              "WCAG2AA.Principle1.Guideline1_4.1_4_3.G18.Fail"
            ]
          }
          EOF
          
      - name: Run pa11y accessibility scan (HTML report)
        run: |
          echo "Running pa11y scan for HTML report..."
          echo "DEBUG: pa11y version:"
          pa11y --version
          echo "DEBUG: Target URL: $TARGET_URL"
          pa11y $TARGET_URL --reporter html --config pa11y.json > accessibility-reports/pa11y-report.html || true
          echo "DEBUG: pa11y HTML scan completed, checking file size:"
          ls -la accessibility-reports/pa11y-report.html || echo "HTML report not found"
          
      - name: Run pa11y accessibility scan (JSON report)
        run: |
          echo "Running pa11y scan for JSON report..."
          pa11y $TARGET_URL --reporter json --config pa11y.json --include-warnings --include-notices > accessibility-reports/pa11y-report.json || true
          echo "DEBUG: pa11y JSON scan completed, checking content:"
          echo "File size: $(wc -c < accessibility-reports/pa11y-report.json 2>/dev/null || echo '0') bytes"
          echo "First few lines of JSON:"
          head -5 accessibility-reports/pa11y-report.json 2>/dev/null || echo "JSON report not found or empty"
          
      - name: Run pa11y accessibility scan (CSV report)
        run: |
          echo "Running pa11y scan for CSV report..."
          pa11y $TARGET_URL --reporter csv --config pa11y.json --include-warnings --include-notices > accessibility-reports/pa11y-report.csv || true
          echo "DEBUG: pa11y CSV scan completed, checking content:"
          echo "File size: $(wc -c < accessibility-reports/pa11y-report.csv 2>/dev/null || echo '0') bytes"
          echo "CSV content preview:"
          head -3 accessibility-reports/pa11y-report.csv 2>/dev/null || echo "CSV report not found or empty"
          
      - name: Run axe-core accessibility scan
        run: |
          echo "Running axe-core scan..."
          npx axe $TARGET_URL \
            --save accessibility-reports/axe-report.json \
            --timeout 30000 \
            --chrome-options="no-sandbox,disable-dev-shm-usage" || true
            
      - name: Run Lighthouse accessibility audit
        run: |
          echo "Running Lighthouse accessibility audit..."
          lighthouse $TARGET_URL \
            --only-categories=accessibility \
            --output=json \
            --output=html \
            --output-path=accessibility-reports/lighthouse-accessibility \
            --chrome-flags="--headless --no-sandbox --disable-dev-shm-usage" \
            --max-wait-for-load=30000 || true
            
      - name: Generate comprehensive summary report
        run: |
          echo "# 🛠️ Accessibility Fix Guide" > accessibility-reports/README.md
          echo "" >> accessibility-reports/README.md
          echo "**Scan Date:** $(date)" >> accessibility-reports/README.md
          echo "**Target URL:** $TARGET_URL" >> accessibility-reports/README.md
          echo "**Standards:** WCAG 2.1 AA" >> accessibility-reports/README.md
          echo "" >> accessibility-reports/README.md
          
          # Initialize counters and arrays for prioritization
          CRITICAL_ISSUES=0
          HIGH_PRIORITY=0
          MEDIUM_PRIORITY=0
          LOW_PRIORITY=0
          
          echo "## 🎯 Priority Action Plan" >> accessibility-reports/README.md
          echo "" >> accessibility-reports/README.md
          
          # Extract and prioritize axe-core violations (most reliable)
          if [ -f accessibility-reports/axe-report.json ]; then
            echo "### 🚨 Critical Issues (Fix First)" >> accessibility-reports/README.md
            echo "" >> accessibility-reports/README.md
            echo "These are WCAG violations that significantly impact user experience:" >> accessibility-reports/README.md
            echo "" >> accessibility-reports/README.md
            
            # Extract critical violations with specific fix guidance
            cat accessibility-reports/axe-report.json | jq -r '
              if type == "array" then .[0].violations else .violations end |
              .[] |
              "#### \(.id | gsub("-"; " ") | ascii_upcase)
              **Impact:** \(.impact // "Unknown")
              **Description:** \(.description)
              **How to fix:** \(.help)
              **Elements affected:** \(.nodes | length)
              **WCAG Reference:** \(.tags | map(select(test("wcag"))) | join(", "))
              
              "
            ' 2>/dev/null >> accessibility-reports/README.md || echo "Could not parse axe-core violations" >> accessibility-reports/README.md
            
            CRITICAL_ISSUES=$(cat accessibility-reports/axe-report.json | jq -r 'if type == "array" then .[0].violations else .violations end | length' 2>/dev/null || echo "0")
          fi
          
          # Extract Lighthouse structural issues
          if [ -f accessibility-reports/lighthouse-accessibility.report.json ]; then
            echo "### 🏗️ Structural Issues (High Priority)" >> accessibility-reports/README.md
            echo "" >> accessibility-reports/README.md
            echo "These foundational issues affect screen reader navigation:" >> accessibility-reports/README.md
            echo "" >> accessibility-reports/README.md
            
            # Check for landmark-one-main
            if cat accessibility-reports/lighthouse-accessibility.report.json | jq -r '.audits["landmark-one-main"].scoreDisplayMode' | grep -q "notApplicable"; then
              echo "#### ADD MAIN LANDMARK" >> accessibility-reports/README.md
              echo "**Issue:** Your page lacks a \`<main>\` landmark" >> accessibility-reports/README.md
              echo "**Fix:** Wrap your primary content in a \`<main>\` element" >> accessibility-reports/README.md
              echo "\`\`\`jsx" >> accessibility-reports/README.md
              echo "// In your App.jsx:" >> accessibility-reports/README.md
              echo "<main>" >> accessibility-reports/README.md
              echo "  {/* Your main content components */}" >> accessibility-reports/README.md
              echo "  <StatLeaders />" >> accessibility-reports/README.md
              echo "  <TeamRankings />" >> accessibility-reports/README.md
              echo "  <TournamentBracket />" >> accessibility-reports/README.md
              echo "</main>" >> accessibility-reports/README.md
              echo "\`\`\`" >> accessibility-reports/README.md
              echo "" >> accessibility-reports/README.md
              HIGH_PRIORITY=$((HIGH_PRIORITY + 1))
            fi
            
            # Check for bypass navigation
            if cat accessibility-reports/lighthouse-accessibility.report.json | jq -r '.audits.bypass.scoreDisplayMode' | grep -q "notApplicable"; then
              echo "#### ADD SKIP NAVIGATION" >> accessibility-reports/README.md
              echo "**Issue:** No way for keyboard users to skip repetitive navigation" >> accessibility-reports/README.md
              echo "**Fix:** Add a skip link at the top of your page" >> accessibility-reports/README.md
              echo "\`\`\`jsx" >> accessibility-reports/README.md
              echo "// Add this as the first element in App.jsx:" >> accessibility-reports/README.md
              echo "<a href=\"#main-content\" className=\"skip-link\">" >> accessibility-reports/README.md
              echo "  Skip to main content" >> accessibility-reports/README.md
              echo "</a>" >> accessibility-reports/README.md
              echo "<main id=\"main-content\">" >> accessibility-reports/README.md
              echo "  {/* Your content */}" >> accessibility-reports/README.md
              echo "</main>" >> accessibility-reports/README.md
              echo "\`\`\`" >> accessibility-reports/README.md
              echo "" >> accessibility-reports/README.md
              echo "Add this CSS:" >> accessibility-reports/README.md
              echo "\`\`\`css" >> accessibility-reports/README.md
              echo ".skip-link {" >> accessibility-reports/README.md
              echo "  position: absolute;" >> accessibility-reports/README.md
              echo "  top: -40px;" >> accessibility-reports/README.md
              echo "  left: 6px;" >> accessibility-reports/README.md
              echo "  background: #000;" >> accessibility-reports/README.md
              echo "  color: #fff;" >> accessibility-reports/README.md
              echo "  padding: 8px;" >> accessibility-reports/README.md
              echo "  text-decoration: none;" >> accessibility-reports/README.md
              echo "  z-index: 1000;" >> accessibility-reports/README.md
              echo "}" >> accessibility-reports/README.md
              echo ".skip-link:focus { top: 6px; }" >> accessibility-reports/README.md
              echo "\`\`\`" >> accessibility-reports/README.md
              echo "" >> accessibility-reports/README.md
              HIGH_PRIORITY=$((HIGH_PRIORITY + 1))
            fi
          fi
          
          # Analyze pa11y issues for common patterns
          if [ -f accessibility-reports/pa11y-report.json ]; then
            PA11Y_COUNT=$(cat accessibility-reports/pa11y-report.json | jq '. | length' 2>/dev/null || echo "0")
            
            if [ "$PA11Y_COUNT" -gt "100" ]; then
              echo "### 📝 Content Quality Issues (Medium Priority)" >> accessibility-reports/README.md
              echo "" >> accessibility-reports/README.md
              echo "**Found:** $PA11Y_COUNT content and markup issues" >> accessibility-reports/README.md
              echo "" >> accessibility-reports/README.md
              echo "**Common fixes needed:**" >> accessibility-reports/README.md
              echo "- Add \`alt\` attributes to images" >> accessibility-reports/README.md
              echo "- Ensure proper heading hierarchy (h1 → h2 → h3)" >> accessibility-reports/README.md
              echo "- Add labels to form inputs" >> accessibility-reports/README.md
              echo "- Improve color contrast ratios" >> accessibility-reports/README.md
              echo "" >> accessibility-reports/README.md
              echo "📊 **Detailed issues:** See \`pa11y-report.html\` for specific elements and locations" >> accessibility-reports/README.md
              echo "" >> accessibility-reports/README.md
              MEDIUM_PRIORITY=$PA11Y_COUNT
            fi
          fi
          
          # Summary and next steps
          TOTAL_ISSUES=$((CRITICAL_ISSUES + HIGH_PRIORITY + MEDIUM_PRIORITY))
          
          echo "## ✅ Implementation Roadmap" >> accessibility-reports/README.md
          echo "" >> accessibility-reports/README.md
          echo "**Phase 1: Critical Fixes** (Est. 2-4 hours)" >> accessibility-reports/README.md
          echo "- Fix $CRITICAL_ISSUES WCAG violations (see above)" >> accessibility-reports/README.md
          echo "- Add main landmark and skip navigation ($HIGH_PRIORITY structural fixes)" >> accessibility-reports/README.md
          echo "" >> accessibility-reports/README.md
          echo "**Phase 2: Content Quality** (Est. 4-8 hours)" >> accessibility-reports/README.md
          echo "- Address $MEDIUM_PRIORITY content and markup issues" >> accessibility-reports/README.md
          echo "- Review pa11y-report.html for specific element fixes" >> accessibility-reports/README.md
          echo "" >> accessibility-reports/README.md
          echo "**Phase 3: Validation** (Est. 1-2 hours)" >> accessibility-reports/README.md
          echo "- Re-run accessibility scan" >> accessibility-reports/README.md
          echo "- Test with screen reader (NVDA or VoiceOver)" >> accessibility-reports/README.md
          echo "- Validate keyboard navigation" >> accessibility-reports/README.md
          echo "" >> accessibility-reports/README.md
          
          echo "## 🔧 Quick Component Fixes" >> accessibility-reports/README.md
          echo "" >> accessibility-reports/README.md
          echo "Based on your React components, here are likely needed updates:" >> accessibility-reports/README.md
          echo "" >> accessibility-reports/README.md
          echo "### App.jsx" >> accessibility-reports/README.md
          echo "- Wrap content in \`<main>\` element" >> accessibility-reports/README.md
          echo "- Add skip link for keyboard users" >> accessibility-reports/README.md
          echo "- Ensure proper page title" >> accessibility-reports/README.md
          echo "" >> accessibility-reports/README.md
          echo "### StatLeaders.jsx, TeamRankings.jsx, TournamentBracket.jsx" >> accessibility-reports/README.md
          echo "- Add proper heading structure (h2, h3)" >> accessibility-reports/README.md
          echo "- Ensure data tables have headers" >> accessibility-reports/README.md
          echo "- Add ARIA labels for complex widgets" >> accessibility-reports/README.md
          echo "" >> accessibility-reports/README.md
          echo "### Scoreboard.jsx" >> accessibility-reports/README.md
          echo "- Add live region for score updates" >> accessibility-reports/README.md
          echo "- Ensure proper labeling of interactive elements" >> accessibility-reports/README.md
          echo "" >> accessibility-reports/README.md
          
          echo "## 📚 Resources" >> accessibility-reports/README.md
          echo "" >> accessibility-reports/README.md
          echo "- [React Accessibility Guide](https://react.dev/learn/accessibility)" >> accessibility-reports/README.md
          echo "- [WCAG 2.1 Quick Reference](https://www.w3.org/WAI/WCAG21/quickref/)" >> accessibility-reports/README.md
          echo "- [axe-react Development Tools](https://github.com/dequelabs/axe-core-npm/tree/develop/packages/react)" >> accessibility-reports/README.md
          echo "- [Screen Reader Testing Guide](https://webaim.org/articles/screenreader_testing/)" >> accessibility-reports/README.md
          
      - name: List generated reports
        run: |
          echo "Generated accessibility reports:"
          ls -la accessibility-reports/
          
      - name: Upload accessibility reports
        uses: actions/upload-artifact@v4
        with:
          name: accessibility-evaluation-${{ github.run_number }}
          path: accessibility-reports/
          retention-days: 90
          
      - name: Create workflow summary
        if: always()
        run: |
          echo "# 🛠️ Developer Action Required" > scan-summary.txt
          echo "" >> scan-summary.txt
          echo "**Scan completed:** $(date)" >> scan-summary.txt
          echo "**Target URL:** $TARGET_URL" >> scan-summary.txt
          echo "**Workflow Run:** ${{ github.run_number }}" >> scan-summary.txt
          echo "" >> scan-summary.txt
          
          TOTAL_ISSUES=0
          CRITICAL_COUNT=0
          HIGH_PRIORITY_COUNT=0
          
          # Check axe-core results for critical issues
          if [ -f accessibility-reports/axe-report.json ]; then
            CRITICAL_COUNT=$(cat accessibility-reports/axe-report.json | jq -r 'if type == "array" then .[0].violations else .violations end | length' 2>/dev/null || echo "0")
            if [ "$CRITICAL_COUNT" -gt "0" ]; then
              echo "🚨 **CRITICAL:** $CRITICAL_COUNT WCAG violations require immediate fixes" >> scan-summary.txt
            else
              echo "✅ **WCAG Compliance:** No critical violations found" >> scan-summary.txt
            fi
            TOTAL_ISSUES=$((TOTAL_ISSUES + CRITICAL_COUNT))
          fi
          
          # Check Lighthouse for structural issues
          if [ -f accessibility-reports/lighthouse-accessibility.report.json ]; then
            LIGHTHOUSE_SCORE=$(cat accessibility-reports/lighthouse-accessibility.report.json | jq '.categories.accessibility.score * 100' 2>/dev/null || echo "0")
            
            # Count structural issues
            LIGHTHOUSE_STRUCTURAL=0
            if cat accessibility-reports/lighthouse-accessibility.report.json | jq -r '.audits["landmark-one-main"].scoreDisplayMode' | grep -q "notApplicable"; then
              LIGHTHOUSE_STRUCTURAL=$((LIGHTHOUSE_STRUCTURAL + 1))
            fi
            if cat accessibility-reports/lighthouse-accessibility.report.json | jq -r '.audits.bypass.scoreDisplayMode' | grep -q "notApplicable"; then
              LIGHTHOUSE_STRUCTURAL=$((LIGHTHOUSE_STRUCTURAL + 1))
            fi
            
            if [ "$LIGHTHOUSE_STRUCTURAL" -gt "0" ]; then
              echo "🏗️ **STRUCTURAL:** $LIGHTHOUSE_STRUCTURAL foundation issues need fixes" >> scan-summary.txt
              HIGH_PRIORITY_COUNT=$LIGHTHOUSE_STRUCTURAL
            fi
            
            echo "💡 **Lighthouse Score:** $LIGHTHOUSE_SCORE% (structural issues excluded from score)" >> scan-summary.txt
            TOTAL_ISSUES=$((TOTAL_ISSUES + LIGHTHOUSE_STRUCTURAL))
          fi
          
          # Check pa11y for content issues
          if [ -f accessibility-reports/pa11y-report.json ]; then
            PA11Y_COUNT=$(cat accessibility-reports/pa11y-report.json | jq '. | length' 2>/dev/null || echo "0")
            if [ "$PA11Y_COUNT" -gt "0" ]; then
              echo "📝 **CONTENT:** $PA11Y_COUNT markup and content issues found" >> scan-summary.txt
            fi
            TOTAL_ISSUES=$((TOTAL_ISSUES + PA11Y_COUNT))
          fi
          
          echo "" >> scan-summary.txt
          
          # Action plan
          if [ "$TOTAL_ISSUES" -eq "0" ]; then
            echo "🎉 **CONGRATULATIONS!** Your app is accessibility compliant!" >> scan-summary.txt
          else
            echo "## 🎯 Next Steps (Estimated time: 4-8 hours)" >> scan-summary.txt
            echo "" >> scan-summary.txt
            
            if [ "$CRITICAL_COUNT" -gt "0" ]; then
              echo "**1. Fix Critical Issues First** ⏰ 2-3 hours" >> scan-summary.txt
              echo "   - Download reports and address $CRITICAL_COUNT WCAG violations" >> scan-summary.txt
              echo "   - These impact users with disabilities immediately" >> scan-summary.txt
              echo "" >> scan-summary.txt
            fi
            
            if [ "$HIGH_PRIORITY_COUNT" -gt "0" ]; then
              echo "**2. Add Structural Elements** ⏰ 1 hour" >> scan-summary.txt
              echo "   - Add \`<main>\` landmark to App.jsx" >> scan-summary.txt
              echo "   - Add skip navigation for keyboard users" >> scan-summary.txt
              echo "   - These help screen readers navigate your site" >> scan-summary.txt
              echo "" >> scan-summary.txt
            fi
            
            if [ "$PA11Y_COUNT" -gt "50" ]; then
              echo "**3. Review Content Issues** ⏰ 2-4 hours" >> scan-summary.txt
              echo "   - Check pa11y-report.html for specific fixes needed" >> scan-summary.txt
              echo "   - Focus on images, headings, and form labels" >> scan-summary.txt
              echo "" >> scan-summary.txt
            fi
            
            echo "**4. Test Your Fixes** ⏰ 30 minutes" >> scan-summary.txt
            echo "   - Re-run this workflow to verify improvements" >> scan-summary.txt
            echo "   - Test keyboard navigation (Tab key)" >> scan-summary.txt
            echo "   - Test with screen reader if possible" >> scan-summary.txt
          fi
          
          echo "" >> scan-summary.txt
          echo "📋 **Download the complete fix guide:** \`accessibility-evaluation-${{ github.run_number }}.zip\`" >> scan-summary.txt
          echo "📖 **Look for:** \`README.md\` with step-by-step instructions and code examples" >> scan-summary.txt
          
          # Output to workflow summary
          cat scan-summary.txt >> $GITHUB_STEP_SUMMARY
          
          # Also output to console for debugging
          echo "=== DEVELOPER ACTION SUMMARY ==="
          cat scan-summary.txt