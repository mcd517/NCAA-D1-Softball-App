name: Comprehensive Web Accessibility Evaluation

on:
  schedule:
    # Run every Monday at 9:00 AM UTC (weekly)
    - cron: '0 9 * * 1'
  workflow_dispatch: # Allow manual triggering
  
env:
  TARGET_URL: https://ncaa-d1-softball.netlify.app/
  
jobs:
  accessibility-audit:
    runs-on: ubuntu-latest
    name: Comprehensive Accessibility Audit
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Install accessibility testing tools
        run: |
          npm install -g pa11y @axe-core/cli lighthouse puppeteer
          
      - name: Create reports directory
        run: mkdir -p accessibility-reports
        
      - name: Create pa11y configuration file
        run: |
          cat > pa11y.json << 'EOF'
          {
            "chromeLaunchConfig": {
              "args": [
                "--no-sandbox",
                "--disable-dev-shm-usage",
                "--disable-gpu",
                "--headless"
              ]
            },
            "timeout": 30000,
            "wait": 3000,
            "standard": "WCAG2AA",
            "runners": ["htmlcs"],
            "ignore": [
              "WCAG2AA.Principle1.Guideline1_4.1_4_3.G18.Fail"
            ]
          }
          EOF

      - name: Create keyboard navigation test script
        run: |
          cat > keyboard-test.cjs << 'EOF'
          const puppeteer = require('puppeteer');
          const { writeFileSync } = require('fs');

          async function testKeyboardNavigation() {
            const browser = await puppeteer.launch({
              headless: true,
              args: ['--no-sandbox', '--disable-dev-shm-usage']
            });
            
            const page = await browser.newPage();
            const issues = [];
            
            try {
              const targetUrl = process.env.TARGET_URL || 'https://ncaa-d1-softball.netlify.app/';
              console.log(`Testing keyboard navigation on: ${targetUrl}`);
              await page.goto(targetUrl, { waitUntil: 'networkidle0', timeout: 30000 });
              
              // Test tab navigation
              console.log('Testing focusable elements...');
              const focusableElements = await page.$$eval('button, [href], input, select, textarea, [tabindex]:not([tabindex="-1"])', elements => {
                return elements.map(el => ({
                  tagName: el.tagName,
                  id: el.id,
                  className: el.className,
                  tabIndex: el.tabIndex,
                  textContent: el.textContent ? el.textContent.trim().substring(0, 50) : ''
                }));
              });
              
              console.log(`Found ${focusableElements.length} focusable elements`);
              
              // Test each focusable element (limit to 20 for performance)
              const elementsToTest = Math.min(focusableElements.length, 20);
              for (let i = 0; i < elementsToTest; i++) {
                await page.keyboard.press('Tab');
                
                const activeElement = await page.evaluate(() => {
                  const el = document.activeElement;
                  if (!el) return null;
                  
                  const computedStyle = window.getComputedStyle(el);
                  const pseudoStyle = window.getComputedStyle(el, ':focus');
                  
                  return {
                    tagName: el.tagName,
                    id: el.id,
                    className: el.className,
                    textContent: el.textContent ? el.textContent.trim().substring(0, 30) : '',
                    hasVisibleFocus: (
                      computedStyle.outline !== 'none' ||
                      computedStyle.outlineWidth !== '0px' ||
                      computedStyle.outlineStyle !== 'none' ||
                      computedStyle.boxShadow !== 'none' ||
                      pseudoStyle.outline !== 'none' ||
                      pseudoStyle.outlineWidth !== '0px' ||
                      pseudoStyle.boxShadow !== 'none'
                    )
                  };
                });
                
                if (activeElement && !activeElement.hasVisibleFocus) {
                  issues.push({
                    type: 'keyboard-navigation',
                    severity: 'moderate',
                    message: `Element ${activeElement.tagName} lacks visible focus indicator`,
                    element: activeElement
                  });
                }
              }
              
              // Test Enter/Space key activation on buttons
              console.log('Testing button activation...');
              const buttonElements = await page.$$('button');
              if (buttonElements.length > 0) {
                const button = buttonElements[0];
                await button.focus();
                
                // Test if button responds to Enter key
                const enterResponse = await page.evaluate(() => {
                  return new Promise(resolve => {
                    const btn = document.activeElement;
                    if (!btn || btn.tagName !== 'BUTTON') {
                      resolve(false);
                      return;
                    }
                    
                    let activated = false;
                    const clickHandler = () => { activated = true; };
                    
                    btn.addEventListener('click', clickHandler);
                    
                    // Simulate Enter key press
                    const enterEvent = new KeyboardEvent('keydown', { 
                      key: 'Enter', 
                      code: 'Enter',
                      keyCode: 13,
                      which: 13,
                      bubbles: true,
                      cancelable: true
                    });
                    
                    btn.dispatchEvent(enterEvent);
                    
                    setTimeout(() => {
                      btn.removeEventListener('click', clickHandler);
                      resolve(activated);
                    }, 100);
                  });
                });
                
                if (!enterResponse) {
                  issues.push({
                    type: 'keyboard-navigation',
                    severity: 'serious',
                    message: 'Button does not respond to Enter key activation',
                    element: { tagName: 'BUTTON' }
                  });
                }
              }
              
              // Test skip links
              console.log('Testing skip links...');
              const skipLinks = await page.$$eval('a[href^="#"]', links => {
                return links.filter(link => {
                  const text = link.textContent.toLowerCase();
                  return text.includes('skip') || text.includes('main');
                }).length;
              });
              
              if (skipLinks === 0) {
                issues.push({
                  type: 'keyboard-navigation',
                  severity: 'moderate',
                  message: 'No skip links found for keyboard navigation',
                  element: null
                });
              }
              
            } catch (error) {
              console.error('Keyboard navigation test error:', error);
              issues.push({
                type: 'keyboard-navigation',
                severity: 'critical',
                message: `Keyboard navigation test failed: ${error.message}`,
                element: null
              });
            }
            
            await browser.close();
            
            writeFileSync('accessibility-reports/keyboard-navigation.json', 
              JSON.stringify(issues, null, 2));
            
            console.log(`Keyboard navigation test completed. Found ${issues.length} issues.`);
            return issues.length;
          }

          testKeyboardNavigation().then(count => {
            console.log(`Found ${count} keyboard navigation issues`);
            process.exit(0);
          }).catch(err => {
            console.error('Keyboard test error:', err);
            process.exit(1);
          });
          EOF

      - name: Create screen reader simulation script
        run: |
          cat > screen-reader-test.cjs << 'EOF'
          const puppeteer = require('puppeteer');
          const { writeFileSync } = require('fs');

          async function testScreenReaderCompatibility() {
            const browser = await puppeteer.launch({
              headless: true,
              args: ['--no-sandbox', '--disable-dev-shm-usage']
            });
            
            const page = await browser.newPage();
            const issues = [];
            
            try {
              const targetUrl = process.env.TARGET_URL || 'https://ncaa-d1-softball.netlify.app/';
              console.log(`Testing screen reader compatibility on: ${targetUrl}`);
              await page.goto(targetUrl, { waitUntil: 'networkidle0', timeout: 30000 });
              
              // Test for missing alt text on images
              console.log('Testing image alt text...');
              const imagesWithoutAlt = await page.$$eval('img', imgs => 
                imgs.filter(img => !img.alt || img.alt.trim() === '').length
              );
              
              if (imagesWithoutAlt > 0) {
                issues.push({
                  type: 'screen-reader',
                  severity: 'serious',
                  message: `${imagesWithoutAlt} images missing alt text`,
                  count: imagesWithoutAlt
                });
              }
              
              // Test for missing form labels
              console.log('Testing form labels...');
              const unlabeledInputs = await page.$$eval('input', inputs => 
                inputs.filter(input => {
                  const id = input.id;
                  const ariaLabel = input.getAttribute('aria-label');
                  const ariaLabelledby = input.getAttribute('aria-labelledby');
                  const hasLabel = id && document.querySelector(`label[for="${id}"]`);
                  return !hasLabel && !ariaLabel && !ariaLabelledby;
                }).length
              );
              
              if (unlabeledInputs > 0) {
                issues.push({
                  type: 'screen-reader',
                  severity: 'serious',
                  message: `${unlabeledInputs} form inputs missing labels`,
                  count: unlabeledInputs
                });
              }
              
              // Test for missing headings structure
              console.log('Testing heading structure...');
              const headings = await page.$$eval('h1, h2, h3, h4, h5, h6', headings => 
                headings.map(h => ({ level: parseInt(h.tagName[1]), text: h.textContent.trim() }))
              );
              
              if (headings.length === 0) {
                issues.push({
                  type: 'screen-reader',
                  severity: 'moderate',
                  message: 'No heading structure found for screen reader navigation',
                  count: 1
                });
              } else {
                // Check for proper heading hierarchy
                let previousLevel = 0;
                for (const heading of headings) {
                  if (heading.level > previousLevel + 1) {
                    issues.push({
                      type: 'screen-reader',
                      severity: 'moderate',
                      message: `Heading hierarchy skip detected (h${previousLevel} to h${heading.level})`,
                      count: 1
                    });
                    break;
                  }
                  previousLevel = heading.level;
                }
              }
              
              // Test for missing ARIA landmarks
              console.log('Testing ARIA landmarks...');
              const landmarks = await page.$$eval('[role="main"], [role="navigation"], [role="banner"], [role="contentinfo"], main, nav, header, footer', 
                elements => elements.length
              );
              
              if (landmarks === 0) {
                issues.push({
                  type: 'screen-reader',
                  severity: 'moderate',
                  message: 'No ARIA landmarks found for screen reader navigation',
                  count: 1
                });
              }
              
              // Test for missing page title
              console.log('Testing page title...');
              const pageTitle = await page.title();
              if (!pageTitle || pageTitle.trim() === '') {
                issues.push({
                  type: 'screen-reader',
                  severity: 'moderate',
                  message: 'Page missing descriptive title',
                  count: 1
                });
              }
              
              // Test for missing language attribute
              console.log('Testing language attribute...');
              const langAttribute = await page.$eval('html', html => html.getAttribute('lang'));
              if (!langAttribute) {
                issues.push({
                  type: 'screen-reader',
                  severity: 'moderate',
                  message: 'HTML element missing lang attribute',
                  count: 1
                });
              }
              
            } catch (error) {
              console.error('Screen reader test error:', error);
              issues.push({
                type: 'screen-reader',
                severity: 'critical',
                message: `Screen reader test failed: ${error.message}`,
                count: 1
              });
            }
            
            await browser.close();
            
            writeFileSync('accessibility-reports/screen-reader.json', 
              JSON.stringify(issues, null, 2));
            
            console.log(`Screen reader test completed. Found ${issues.length} issues.`);
            return issues.length;
          }

          testScreenReaderCompatibility().then(count => {
            console.log(`Found ${count} screen reader issues`);
            process.exit(0);
          }).catch(err => {
            console.error('Screen reader test error:', err);
            process.exit(1);
          });
          EOF
          
      - name: Run pa11y accessibility scan (HTML report)
        run: |
          echo "Running pa11y scan for HTML report..."
          echo "DEBUG: pa11y version:"
          pa11y --version
          echo "DEBUG: Target URL: $TARGET_URL"
          pa11y $TARGET_URL --reporter html --config pa11y.json > accessibility-reports/pa11y-report.html || true
          echo "DEBUG: pa11y HTML scan completed, checking file size:"
          ls -la accessibility-reports/pa11y-report.html || echo "HTML report not found"
          
      - name: Run pa11y accessibility scan (JSON report)
        run: |
          echo "Running pa11y scan for JSON report..."
          pa11y $TARGET_URL --reporter json --config pa11y.json --include-warnings --include-notices > accessibility-reports/pa11y-report.json || true
          echo "DEBUG: pa11y JSON scan completed, checking content:"
          echo "File size: $(wc -c < accessibility-reports/pa11y-report.json 2>/dev/null || echo '0') bytes"
          echo "First few lines of JSON:"
          head -5 accessibility-reports/pa11y-report.json 2>/dev/null || echo "JSON report not found or empty"
          
      - name: Run pa11y accessibility scan (CSV report)
        run: |
          echo "Running pa11y scan for CSV report..."
          pa11y $TARGET_URL --reporter csv --config pa11y.json --include-warnings --include-notices > accessibility-reports/pa11y-report.csv || true
          echo "DEBUG: pa11y CSV scan completed, checking content:"
          echo "File size: $(wc -c < accessibility-reports/pa11y-report.csv 2>/dev/null || echo '0') bytes"
          echo "CSV content preview:"
          head -3 accessibility-reports/pa11y-report.csv 2>/dev/null || echo "CSV report not found or empty"
          
      - name: Run axe-core accessibility scan
        run: |
          echo "Running axe-core scan..."
          npx axe $TARGET_URL \
            --save accessibility-reports/axe-report.json \
            --timeout 30000 \
            --chrome-options="no-sandbox,disable-dev-shm-usage" || true
            
      - name: Run Lighthouse accessibility audit
        run: |
          echo "Running Lighthouse accessibility audit..."
          lighthouse $TARGET_URL \
            --only-categories=accessibility \
            --output=json \
            --output-path=accessibility-reports/lighthouse-accessibility.report.json \
            --chrome-flags="--headless --no-sandbox --disable-dev-shm-usage" \
            --max-wait-for-load=30000 || true
            
      - name: Run Lighthouse accessibility audit (HTML report)
        run: |
          echo "Running Lighthouse accessibility audit (HTML)..."
          lighthouse $TARGET_URL \
            --only-categories=accessibility \
            --output=html \
            --output-path=accessibility-reports/lighthouse-accessibility \
            --chrome-flags="--headless --no-sandbox --disable-dev-shm-usage" \
            --max-wait-for-load=30000 || true
            
      - name: Run Lighthouse mobile accessibility audit
        run: |
          echo "Running Lighthouse mobile accessibility audit..."
          lighthouse $TARGET_URL \
            --only-categories=accessibility \
            --emulated-form-factor=mobile \
            --output=json \
            --output-path=accessibility-reports/lighthouse-accessibility-mobile.report.json \
            --chrome-flags="--headless --no-sandbox --disable-dev-shm-usage" \
            --max-wait-for-load=30000 || true

      - name: Run keyboard navigation tests
        run: |
          echo "Running keyboard navigation tests..."
          node keyboard-test.cjs || true

      - name: Run screen reader simulation tests
        run: |
          echo "Running screen reader simulation..."
          node screen-reader-test.cjs || true

      - name: Run screen reader simulation with axe-core
        run: |
          echo "Running screen reader simulation with axe-core..."
          npx axe $TARGET_URL \
            --save accessibility-reports/screenreader-simulation.json \
            --timeout 30000 \
            --chrome-options="no-sandbox,disable-dev-shm-usage" \
            --rules heading-order,landmark-one-main,aria-allowed-attr,aria-allowed-role || true

      - name: Generate comprehensive summary report
        run: |
          echo "# 🛠️ Accessibility Fix Guide" > accessibility-reports/README.md
          echo "" >> accessibility-reports/README.md
          echo "**Scan Date:** $(date)" >> accessibility-reports/README.md
          echo "**Target URL:** $TARGET_URL" >> accessibility-reports/README.md
          echo "**Standards:** WCAG 2.1 AA" >> accessibility-reports/README.md
          echo "" >> accessibility-reports/README.md
          
          # Initialize counters and arrays for prioritization
          CRITICAL_ISSUES=0
          HIGH_PRIORITY=0
          MEDIUM_PRIORITY=0
          LOW_PRIORITY=0
          
          echo "## 🎯 Priority Action Plan" >> accessibility-reports/README.md
          echo "" >> accessibility-reports/README.md
          
          # Extract and prioritize axe-core violations (most reliable)
          if [ -f accessibility-reports/axe-report.json ]; then
            echo "### 🚨 Critical Issues (Fix First)" >> accessibility-reports/README.md
            echo "" >> accessibility-reports/README.md
            echo "These are WCAG violations that significantly impact user experience:" >> accessibility-reports/README.md
            echo "" >> accessibility-reports/README.md
            
            # Extract critical violations with specific fix guidance
            cat accessibility-reports/axe-report.json | jq -r '
              if type == "array" then .[0].violations else .violations end |
              .[] |
              "#### \(.id | gsub("-"; " ") | ascii_upcase)
              **Impact:** \(.impact // "Unknown")
              **Description:** \(.description)
              **How to fix:** \(.help)
              **Elements affected:** \(.nodes | length)
              **WCAG Reference:** \(.tags | map(select(test("wcag"))) | join(", "))
              
              "
            ' 2>/dev/null >> accessibility-reports/README.md || echo "Could not parse axe-core violations" >> accessibility-reports/README.md
            
            CRITICAL_ISSUES=$(cat accessibility-reports/axe-report.json | jq -r 'if type == "array" then .[0].violations else .violations end | length' 2>/dev/null || echo "0")
          fi
          
          # Extract Lighthouse structural issues
          if [ -f accessibility-reports/lighthouse-accessibility.report.json ]; then
            echo "### 🏗️ Structural Issues (High Priority)" >> accessibility-reports/README.md
            echo "" >> accessibility-reports/README.md
            echo "These foundational issues affect screen reader navigation:" >> accessibility-reports/README.md
            echo "" >> accessibility-reports/README.md
            
            # Check for landmark-one-main
            if cat accessibility-reports/lighthouse-accessibility.report.json | jq -r '.audits["landmark-one-main"].scoreDisplayMode' | grep -q "notApplicable"; then
              echo "#### ADD MAIN LANDMARK" >> accessibility-reports/README.md
              echo "**Issue:** Your page lacks a \`<main>\` landmark" >> accessibility-reports/README.md
              echo "**Fix:** Wrap your primary content in a \`<main>\` element" >> accessibility-reports/README.md
              echo "\`\`\`jsx" >> accessibility-reports/README.md
              echo "// In your App.jsx:" >> accessibility-reports/README.md
              echo "<main>" >> accessibility-reports/README.md
              echo "  {/* Your main content components */}" >> accessibility-reports/README.md
              echo "  <StatLeaders />" >> accessibility-reports/README.md
              echo "  <TeamRankings />" >> accessibility-reports/README.md
              echo "  <TournamentBracket />" >> accessibility-reports/README.md
              echo "</main>" >> accessibility-reports/README.md
              echo "\`\`\`" >> accessibility-reports/README.md
              echo "" >> accessibility-reports/README.md
              HIGH_PRIORITY=$((HIGH_PRIORITY + 1))
            fi
            
            # Check for bypass navigation
            if cat accessibility-reports/lighthouse-accessibility.report.json | jq -r '.audits.bypass.scoreDisplayMode' | grep -q "notApplicable"; then
              echo "#### ADD SKIP NAVIGATION" >> accessibility-reports/README.md
              echo "**Issue:** No way for keyboard users to skip repetitive navigation" >> accessibility-reports/README.md
              echo "**Fix:** Add a skip link at the top of your page" >> accessibility-reports/README.md
              echo "\`\`\`jsx" >> accessibility-reports/README.md
              echo "// Add this as the first element in App.jsx:" >> accessibility-reports/README.md
              echo "<a href=\"#main-content\" className=\"skip-link\">" >> accessibility-reports/README.md
              echo "  Skip to main content" >> accessibility-reports/README.md
              echo "</a>" >> accessibility-reports/README.md
              echo "<main id=\"main-content\">" >> accessibility-reports/README.md
              echo "  {/* Your content */}" >> accessibility-reports/README.md
              echo "</main>" >> accessibility-reports/README.md
              echo "\`\`\`" >> accessibility-reports/README.md
              echo "" >> accessibility-reports/README.md
              echo "Add this CSS:" >> accessibility-reports/README.md
              echo "\`\`\`css" >> accessibility-reports/README.md
              echo ".skip-link {" >> accessibility-reports/README.md
              echo "  position: absolute;" >> accessibility-reports/README.md
              echo "  top: -40px;" >> accessibility-reports/README.md
              echo "  left: 6px;" >> accessibility-reports/README.md
              echo "  background: #000;" >> accessibility-reports/README.md
              echo "  color: #fff;" >> accessibility-reports/README.md
              echo "  padding: 8px;" >> accessibility-reports/README.md
              echo "  text-decoration: none;" >> accessibility-reports/README.md
              echo "  z-index: 1000;" >> accessibility-reports/README.md
              echo "}" >> accessibility-reports/README.md
              echo ".skip-link:focus { top: 6px; }" >> accessibility-reports/README.md
              echo "\`\`\`" >> accessibility-reports/README.md
              echo "" >> accessibility-reports/README.md
              HIGH_PRIORITY=$((HIGH_PRIORITY + 1))
            fi
          fi
          
          # Analyze pa11y issues for common patterns
          if [ -f accessibility-reports/pa11y-report.json ]; then
            PA11Y_COUNT=$(cat accessibility-reports/pa11y-report.json | jq '. | length' 2>/dev/null || echo "0")
            
            if [ "$PA11Y_COUNT" -gt "100" ]; then
              echo "### 📝 Content Quality Issues (Medium Priority)" >> accessibility-reports/README.md
              echo "" >> accessibility-reports/README.md
              echo "**Found:** $PA11Y_COUNT content and markup issues" >> accessibility-reports/README.md
              echo "" >> accessibility-reports/README.md
              echo "**Common fixes needed:**" >> accessibility-reports/README.md
              echo "- Add \`alt\` attributes to images" >> accessibility-reports/README.md
              echo "- Ensure proper heading hierarchy (h1 → h2 → h3)" >> accessibility-reports/README.md
              echo "- Add labels to form inputs" >> accessibility-reports/README.md
              echo "- Improve color contrast ratios" >> accessibility-reports/README.md
              echo "" >> accessibility-reports/README.md
              echo "📊 **Detailed issues:** See \`pa11y-report.html\` for specific elements and locations" >> accessibility-reports/README.md
              echo "" >> accessibility-reports/README.md
              MEDIUM_PRIORITY=$PA11Y_COUNT
            fi
          fi
          
          # Summary and next steps
          TOTAL_ISSUES=$((CRITICAL_ISSUES + HIGH_PRIORITY + MEDIUM_PRIORITY))
          
          echo "## ✅ Implementation Roadmap" >> accessibility-reports/README.md
          echo "" >> accessibility-reports/README.md
          echo "**Phase 1: Critical Fixes** (Est. 2-4 hours)" >> accessibility-reports/README.md
          echo "- Fix $CRITICAL_ISSUES WCAG violations (see above)" >> accessibility-reports/README.md
          echo "- Add main landmark and skip navigation ($HIGH_PRIORITY structural fixes)" >> accessibility-reports/README.md
          echo "" >> accessibility-reports/README.md
          echo "**Phase 2: Content Quality** (Est. 4-8 hours)" >> accessibility-reports/README.md
          echo "- Address $MEDIUM_PRIORITY content and markup issues" >> accessibility-reports/README.md
          echo "- Review pa11y-report.html for specific element fixes" >> accessibility-reports/README.md
          echo "" >> accessibility-reports/README.md
          echo "**Phase 3: Validation** (Est. 1-2 hours)" >> accessibility-reports/README.md
          echo "- Re-run accessibility scan" >> accessibility-reports/README.md
          echo "- Test with screen reader (NVDA or VoiceOver)" >> accessibility-reports/README.md
          echo "- Validate keyboard navigation" >> accessibility-reports/README.md
          echo "" >> accessibility-reports/README.md
          
          echo "## 🔧 Quick Component Fixes" >> accessibility-reports/README.md
          echo "" >> accessibility-reports/README.md
          echo "Based on your React components, here are likely needed updates:" >> accessibility-reports/README.md
          echo "" >> accessibility-reports/README.md
          echo "### App.jsx" >> accessibility-reports/README.md
          echo "- Wrap content in \`<main>\` element" >> accessibility-reports/README.md
          echo "- Add skip link for keyboard users" >> accessibility-reports/README.md
          echo "- Ensure proper page title" >> accessibility-reports/README.md
          echo "" >> accessibility-reports/README.md
          echo "### StatLeaders.jsx, TeamRankings.jsx, TournamentBracket.jsx" >> accessibility-reports/README.md
          echo "- Add proper heading structure (h2, h3)" >> accessibility-reports/README.md
          echo "- Ensure data tables have headers" >> accessibility-reports/README.md
          echo "- Add ARIA labels for complex widgets" >> accessibility-reports/README.md
          echo "" >> accessibility-reports/README.md
          echo "### Scoreboard.jsx" >> accessibility-reports/README.md
          echo "- Add live region for score updates" >> accessibility-reports/README.md
          echo "- Ensure proper labeling of interactive elements" >> accessibility-reports/README.md
          echo "" >> accessibility-reports/README.md
          
          echo "## 📚 Resources" >> accessibility-reports/README.md
          echo "" >> accessibility-reports/README.md
          echo "- [React Accessibility Guide](https://react.dev/learn/accessibility)" >> accessibility-reports/README.md
          echo "- [WCAG 2.1 Quick Reference](https://www.w3.org/WAI/WCAG21/quickref/)" >> accessibility-reports/README.md
          echo "- [axe-react Development Tools](https://github.com/dequelabs/axe-core-npm/tree/develop/packages/react)" >> accessibility-reports/README.md
          echo "- [Screen Reader Testing Guide](https://webaim.org/articles/screenreader_testing/)" >> accessibility-reports/README.md
          
      - name: List generated reports
        run: |
          echo "Generated accessibility reports:"
          ls -la accessibility-reports/
          
          # Verify all expected files exist
          echo ""
          echo "=== ARTIFACT CONTENT VERIFICATION ==="
          echo "Checking for required files before upload:"
          
          # Check each expected file
          FILES_FOUND=0
          EXPECTED_FILES=0
          
          # Core reports
          EXPECTED_FILES=$((EXPECTED_FILES + 1))
          if [ -f accessibility-reports/axe-report.json ]; then
            echo "✅ axe-report.json ($(wc -c < accessibility-reports/axe-report.json) bytes)"
            FILES_FOUND=$((FILES_FOUND + 1))
          else
            echo "❌ axe-report.json missing"
          fi
          
          EXPECTED_FILES=$((EXPECTED_FILES + 1))
          if [ -f accessibility-reports/pa11y-report.json ]; then
            echo "✅ pa11y-report.json ($(wc -c < accessibility-reports/pa11y-report.json) bytes)"
            FILES_FOUND=$((FILES_FOUND + 1))
          else
            echo "❌ pa11y-report.json missing"
          fi
          
          EXPECTED_FILES=$((EXPECTED_FILES + 1))
          if [ -f accessibility-reports/pa11y-report.html ]; then
            echo "✅ pa11y-report.html ($(wc -c < accessibility-reports/pa11y-report.html) bytes)"
            FILES_FOUND=$((FILES_FOUND + 1))
          else
            echo "❌ pa11y-report.html missing"
          fi
          
          EXPECTED_FILES=$((EXPECTED_FILES + 1))
          if [ -f accessibility-reports/lighthouse-accessibility.report.json ]; then
            echo "✅ lighthouse-accessibility.report.json ($(wc -c < accessibility-reports/lighthouse-accessibility.report.json) bytes)"
            FILES_FOUND=$((FILES_FOUND + 1))
          else
            echo "❌ lighthouse-accessibility.report.json missing"
          fi
          
          # New test reports
          EXPECTED_FILES=$((EXPECTED_FILES + 1))
          if [ -f accessibility-reports/keyboard-navigation.json ]; then
            echo "✅ keyboard-navigation.json ($(wc -c < accessibility-reports/keyboard-navigation.json) bytes)"
            FILES_FOUND=$((FILES_FOUND + 1))
          else
            echo "❌ keyboard-navigation.json missing"
          fi
          
          EXPECTED_FILES=$((EXPECTED_FILES + 1))
          if [ -f accessibility-reports/screen-reader.json ]; then
            echo "✅ screen-reader.json ($(wc -c < accessibility-reports/screen-reader.json) bytes)"
            FILES_FOUND=$((FILES_FOUND + 1))
          else
            echo "❌ screen-reader.json missing"
          fi
          
          # Generated files
          EXPECTED_FILES=$((EXPECTED_FILES + 1))
          if [ -f accessibility-reports/README.md ]; then
            echo "✅ README.md ($(wc -c < accessibility-reports/README.md) bytes)"
            FILES_FOUND=$((FILES_FOUND + 1))
          else
            echo "❌ README.md missing"
          fi
          
          EXPECTED_FILES=$((EXPECTED_FILES + 1))
          if [ -f accessibility-reports/issue-summary.json ]; then
            echo "✅ issue-summary.json ($(wc -c < accessibility-reports/issue-summary.json) bytes)"
            FILES_FOUND=$((FILES_FOUND + 1))
          else
            echo "❌ issue-summary.json missing"
          fi
          
          EXPECTED_FILES=$((EXPECTED_FILES + 1))
          if [ -f accessibility-reports/baseline-metadata.json ]; then
            echo "✅ baseline-metadata.json ($(wc -c < accessibility-reports/baseline-metadata.json) bytes)"
            FILES_FOUND=$((FILES_FOUND + 1))
          else
            echo "❌ baseline-metadata.json missing"
          fi
          
          echo ""
          echo "=== SUMMARY ==="
          echo "Files found: $FILES_FOUND / $EXPECTED_FILES"
          echo "Directory size: $(du -sh accessibility-reports/ | cut -f1)"
          
          if [ "$FILES_FOUND" -eq "0" ]; then
            echo "🚨 CRITICAL: No files found - artifact upload will fail!"
            echo "Creating minimal artifact to prevent upload failure..."
            echo "No accessibility reports were generated due to tool failures." > accessibility-reports/error.txt
            echo "Check the workflow logs for specific error details." >> accessibility-reports/error.txt
          elif [ "$FILES_FOUND" -lt "$EXPECTED_FILES" ]; then
            echo "⚠️  WARNING: Some files missing - artifact will be incomplete"
          else
            echo "✅ SUCCESS: All expected files present"
          fi
          
      - name: Upload accessibility reports as baseline
        uses: actions/upload-artifact@v4
        with:
          name: accessibility-evaluation
          path: accessibility-reports/
          retention-days: 90

      - name: Create baseline tracking metadata
        run: |
          cat > accessibility-reports/baseline-metadata.json << EOF
          {
            "scan_date": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
            "workflow_run_id": "${{ github.run_id }}",
            "workflow_run_number": "${{ github.run_number }}",
            "repository": "${{ github.repository }}",
            "target_url": "$TARGET_URL",
            "commit_sha": "${{ github.sha }}",
            "baseline_established": true
          }
          EOF

      - name: Check if issues need to be created
        id: check_issues
        run: |
          # Calculate total issues found for reporting
          AXCORE_ISSUES=$(jq 'if type=="array" then .[0].violations else .violations end | length' accessibility-reports/axe-report.json 2>/dev/null || echo 0)
          PA11Y_ISSUES=$(jq 'length' accessibility-reports/pa11y-report.json 2>/dev/null || echo 0)
          KEYBOARD_ISSUES=$(jq 'length' accessibility-reports/keyboard-navigation.json 2>/dev/null || echo 0)
          SCREENREADER_ISSUES=$(jq 'length' accessibility-reports/screen-reader.json 2>/dev/null || echo 0)
          
          TOTAL_ISSUES=$((AXCORE_ISSUES + PA11Y_ISSUES + KEYBOARD_ISSUES + SCREENREADER_ISSUES))
          
          echo "total_issues=$TOTAL_ISSUES" >> $GITHUB_OUTPUT
          echo "axcore_issues=$AXCORE_ISSUES" >> $GITHUB_OUTPUT
          echo "pa11y_issues=$PA11Y_ISSUES" >> $GITHUB_OUTPUT
          echo "keyboard_issues=$KEYBOARD_ISSUES" >> $GITHUB_OUTPUT
          echo "screenreader_issues=$SCREENREADER_ISSUES" >> $GITHUB_OUTPUT
          
          # Store issue summary for manual GitHub issue creation
          cat > accessibility-reports/issue-summary.json << EOF
          {
            "total_issues": ${TOTAL_ISSUES},
            "breakdown": {
              "axcore_issues": ${AXCORE_ISSUES},
              "pa11y_issues": ${PA11Y_ISSUES},
              "keyboard_issues": ${KEYBOARD_ISSUES},
              "screenreader_issues": ${SCREENREADER_ISSUES}
            },
            "scan_date": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
            "workflow_run_number": "${{ github.run_number }}",
            "workflow_run_id": "${{ github.run_id }}",
            "target_url": "$TARGET_URL"
          }
          EOF

      - name: Create workflow summary and GitHub issue template
        if: always()
        run: |
          echo "# 🛠️ Developer Action Required" > scan-summary.txt
          echo "" >> scan-summary.txt
          echo "**Scan completed:** $(date)" >> scan-summary.txt
          echo "**Target URL:** $TARGET_URL" >> scan-summary.txt
          echo "**Workflow Run:** ${{ github.run_number }}" >> scan-summary.txt
          echo "" >> scan-summary.txt
          
          TOTAL_ISSUES=0
          CRITICAL_COUNT=0
          HIGH_PRIORITY_COUNT=0
          MEDIUM_PRIORITY_COUNT=0
          PA11Y_COUNT=0
          KEYBOARD_COUNT=0
          SCREENREADER_COUNT=0
          
          # Check axe-core results for critical issues
          if [ -f accessibility-reports/axe-report.json ]; then
            CRITICAL_COUNT=$(cat accessibility-reports/axe-report.json | jq -r 'if type == "array" then .[0].violations else .violations end | length' 2>/dev/null || echo "0")
            if [ "$CRITICAL_COUNT" -gt "0" ]; then
              echo "🚨 **CRITICAL:** $CRITICAL_COUNT WCAG violations require immediate fixes" >> scan-summary.txt
            else
              echo "✅ **WCAG Compliance:** No critical violations found" >> scan-summary.txt
            fi
            TOTAL_ISSUES=$((TOTAL_ISSUES + CRITICAL_COUNT))
          fi
          
          # Check Lighthouse for structural issues (HIGH PRIORITY)
          if [ -f accessibility-reports/lighthouse-accessibility.report.json ]; then
            LIGHTHOUSE_SCORE=$(cat accessibility-reports/lighthouse-accessibility.report.json | jq '.categories.accessibility.score * 100' 2>/dev/null || echo "0")
            
            # Count structural issues
            LIGHTHOUSE_STRUCTURAL=0
            if cat accessibility-reports/lighthouse-accessibility.report.json | jq -r '.audits["landmark-one-main"].scoreDisplayMode' | grep -q "notApplicable"; then
              LIGHTHOUSE_STRUCTURAL=$((LIGHTHOUSE_STRUCTURAL + 1))
            fi
            if cat accessibility-reports/lighthouse-accessibility.report.json | jq -r '.audits.bypass.scoreDisplayMode' | grep -q "notApplicable"; then
              LIGHTHOUSE_STRUCTURAL=$((LIGHTHOUSE_STRUCTURAL + 1))
            fi
            
            if [ "$LIGHTHOUSE_STRUCTURAL" -gt "0" ]; then
              echo "🏗️ **HIGH PRIORITY:** $LIGHTHOUSE_STRUCTURAL structural foundation issues" >> scan-summary.txt
              HIGH_PRIORITY_COUNT=$LIGHTHOUSE_STRUCTURAL
            fi
            
            echo "💡 **Lighthouse Score:** $LIGHTHOUSE_SCORE%" >> scan-summary.txt
            TOTAL_ISSUES=$((TOTAL_ISSUES + LIGHTHOUSE_STRUCTURAL))
          fi
          
          # Check keyboard navigation issues (HIGH PRIORITY)
          if [ -f accessibility-reports/keyboard-navigation.json ]; then
            KEYBOARD_COUNT=$(cat accessibility-reports/keyboard-navigation.json | jq '. | length' 2>/dev/null || echo "0")
            if [ "$KEYBOARD_COUNT" -gt "0" ]; then
              echo "⌨️ **HIGH PRIORITY:** $KEYBOARD_COUNT keyboard navigation issues" >> scan-summary.txt
              HIGH_PRIORITY_COUNT=$((HIGH_PRIORITY_COUNT + KEYBOARD_COUNT))
            else
              echo "✅ **Keyboard Navigation:** All interactive elements accessible" >> scan-summary.txt
            fi
            TOTAL_ISSUES=$((TOTAL_ISSUES + KEYBOARD_COUNT))
          fi
          
          # Check screen reader issues (HIGH PRIORITY)
          if [ -f accessibility-reports/screen-reader.json ]; then
            SCREENREADER_COUNT=$(cat accessibility-reports/screen-reader.json | jq '. | length' 2>/dev/null || echo "0")
            if [ "$SCREENREADER_COUNT" -gt "0" ]; then
              echo "🔊 **HIGH PRIORITY:** $SCREENREADER_COUNT screen reader compatibility issues" >> scan-summary.txt
              HIGH_PRIORITY_COUNT=$((HIGH_PRIORITY_COUNT + SCREENREADER_COUNT))
            else
              echo "✅ **Screen Reader Support:** Proper landmarks and labels detected" >> scan-summary.txt
            fi
            TOTAL_ISSUES=$((TOTAL_ISSUES + SCREENREADER_COUNT))
          fi
          
          # Check pa11y for content issues (MEDIUM PRIORITY)
          if [ -f accessibility-reports/pa11y-report.json ]; then
            PA11Y_COUNT=$(cat accessibility-reports/pa11y-report.json | jq '. | length' 2>/dev/null || echo "0")
            if [ "$PA11Y_COUNT" -gt "0" ]; then
              echo "📝 **MEDIUM PRIORITY:** $PA11Y_COUNT content and markup issues" >> scan-summary.txt
              MEDIUM_PRIORITY_COUNT=$PA11Y_COUNT
            else
              echo "✅ **Content Quality:** No markup issues detected" >> scan-summary.txt
            fi
            TOTAL_ISSUES=$((TOTAL_ISSUES + PA11Y_COUNT))
          fi
          
          echo "" >> scan-summary.txt
          echo "## 📊 Comprehensive Issue Breakdown" >> scan-summary.txt
          echo "" >> scan-summary.txt
          echo "| Priority | Category | Issues | Impact |" >> scan-summary.txt
          echo "|----------|----------|--------|--------|" >> scan-summary.txt
          echo "| 🚨 Critical | WCAG Violations | $CRITICAL_COUNT | Blocks users with disabilities |" >> scan-summary.txt
          echo "| 🏗️ High | Structural Issues | $((LIGHTHOUSE_STRUCTURAL)) | Affects screen reader navigation |" >> scan-summary.txt
          echo "| ⌨️ High | Keyboard Navigation | $KEYBOARD_COUNT | Blocks keyboard-only users |" >> scan-summary.txt
          echo "| 🔊 High | Screen Reader Support | $SCREENREADER_COUNT | Impacts assistive technology |" >> scan-summary.txt
          echo "| 📝 Medium | Content & Markup | $PA11Y_COUNT | General accessibility quality |" >> scan-summary.txt
          echo "" >> scan-summary.txt
          echo "**Total Issues**: $TOTAL_ISSUES" >> scan-summary.txt
          echo "" >> scan-summary.txt
          
          # Action plan with all test results
          if [ "$TOTAL_ISSUES" -eq "0" ]; then
            echo "🎉 **CONGRATULATIONS!** Your app passes all accessibility tests!" >> scan-summary.txt
            echo "" >> scan-summary.txt
            echo "✅ **WCAG 2.1 AA Compliance**: No violations detected" >> scan-summary.txt
            echo "✅ **Keyboard Navigation**: All elements accessible" >> scan-summary.txt
            echo "✅ **Screen Reader Support**: Proper structure and labels" >> scan-summary.txt
            echo "✅ **Content Quality**: No markup issues found" >> scan-summary.txt
            echo "✅ **Structural Foundation**: Landmarks and navigation present" >> scan-summary.txt
          else
            echo "## 🎯 Priority-Based Action Plan" >> scan-summary.txt
            echo "" >> scan-summary.txt
            
            if [ "$CRITICAL_COUNT" -gt "0" ]; then
              echo "### 🚨 Phase 1: Critical WCAG Fixes (⏰ 2-3 hours)" >> scan-summary.txt
              echo "- **$CRITICAL_COUNT WCAG violations** must be fixed immediately" >> scan-summary.txt
              echo "- These directly violate accessibility standards" >> scan-summary.txt
              echo "- See axe-report.json for specific elements and fixes" >> scan-summary.txt
              echo "" >> scan-summary.txt
            fi
            
            if [ "$HIGH_PRIORITY_COUNT" -gt "0" ]; then
              echo "### 🏗️ Phase 2: High Priority Issues (⏰ 2-4 hours)" >> scan-summary.txt
              echo "" >> scan-summary.txt
              
              if [ "$LIGHTHOUSE_STRUCTURAL" -gt "0" ]; then
                echo "**Structural Foundation ($LIGHTHOUSE_STRUCTURAL issues):**" >> scan-summary.txt
                echo "- Add \`<main>\` landmark to App.jsx" >> scan-summary.txt
                echo "- Add skip navigation for keyboard users" >> scan-summary.txt
                echo "- Improves screen reader page navigation" >> scan-summary.txt
                echo "" >> scan-summary.txt
              fi
              
              if [ "$KEYBOARD_COUNT" -gt "0" ]; then
                echo "**Keyboard Navigation ($KEYBOARD_COUNT issues):**" >> scan-summary.txt
                echo "- Add visible focus indicators to interactive elements" >> scan-summary.txt
                echo "- Ensure all buttons respond to Enter/Space keys" >> scan-summary.txt
                echo "- Test tab order flows logically through content" >> scan-summary.txt
                echo "- Critical for users who cannot use a mouse" >> scan-summary.txt
                echo "" >> scan-summary.txt
              fi
              
              if [ "$SCREENREADER_COUNT" -gt "0" ]; then
                echo "**Screen Reader Support ($SCREENREADER_COUNT issues):**" >> scan-summary.txt
                echo "- Fix heading hierarchy (h1 → h2 → h3)" >> scan-summary.txt
                echo "- Add alt text to images" >> scan-summary.txt
                echo "- Add proper form labels" >> scan-summary.txt
                echo "- Add ARIA landmarks for page regions" >> scan-summary.txt
                echo "- Essential for blind and low-vision users" >> scan-summary.txt
                echo "" >> scan-summary.txt
              fi
            fi
            
            if [ "$PA11Y_COUNT" -gt "0" ]; then
              echo "### 📝 Phase 3: Content Quality (⏰ 2-4 hours)" >> scan-summary.txt
              echo "- **$PA11Y_COUNT content and markup issues**" >> scan-summary.txt
              echo "- Review pa11y-report.html for specific element locations" >> scan-summary.txt
              echo "- Focus on images, headings, and form elements" >> scan-summary.txt
              echo "- Improves overall accessibility experience" >> scan-summary.txt
              echo "" >> scan-summary.txt
            fi
            
            echo "### ✅ Phase 4: Validation (⏰ 30 minutes)" >> scan-summary.txt
            echo "- Re-run this accessibility workflow" >> scan-summary.txt
            echo "- Test keyboard navigation manually (Tab through page)" >> scan-summary.txt
            echo "- Test with screen reader if possible (NVDA/VoiceOver)" >> scan-summary.txt
            echo "- Verify all issues are resolved" >> scan-summary.txt
          fi
          
          echo "" >> scan-summary.txt
          echo "📋 **Download complete reports:** \`accessibility-evaluation.zip\`" >> scan-summary.txt
          
          # Create GitHub issue template for manual creation
          echo "" >> scan-summary.txt
          echo "## 🤖 Manual GitHub Issue Template" >> scan-summary.txt
          echo "" >> scan-summary.txt
          echo "**Title:** \`Accessibility: Fix $TOTAL_ISSUES issues found in scan #${{ github.run_number }}\`" >> scan-summary.txt
          echo "" >> scan-summary.txt
          echo "**Labels:** \`accessibility\`, \`enhancement\`" >> scan-summary.txt
          echo "" >> scan-summary.txt
          echo "**Body:**" >> scan-summary.txt
          echo "\`\`\`" >> scan-summary.txt
          echo "## 🔍 Accessibility Scan Results" >> scan-summary.txt
          echo "" >> scan-summary.txt
          echo "Automated scan found **$TOTAL_ISSUES total issues** across multiple categories:" >> scan-summary.txt
          echo "" >> scan-summary.txt
          echo "### Issue Breakdown:" >> scan-summary.txt
          echo "- 🚨 **Critical WCAG violations**: $CRITICAL_COUNT" >> scan-summary.txt
          echo "- 🏗️ **Structural issues**: $LIGHTHOUSE_STRUCTURAL" >> scan-summary.txt
          echo "- ⌨️ **Keyboard navigation**: $KEYBOARD_COUNT" >> scan-summary.txt
          echo "- 🔊 **Screen reader support**: $SCREENREADER_COUNT" >> scan-summary.txt
          echo "- 📝 **Content & markup**: $PA11Y_COUNT" >> scan-summary.txt
          echo "" >> scan-summary.txt
          echo "### 📊 Test Coverage:" >> scan-summary.txt
          echo "- ✅ WCAG 2.1 AA compliance (axe-core)" >> scan-summary.txt
          echo "- ✅ Keyboard navigation simulation" >> scan-summary.txt
          echo "- ✅ Screen reader compatibility testing" >> scan-summary.txt
          echo "- ✅ Content quality analysis (pa11y)" >> scan-summary.txt
          echo "- ✅ Structural foundation audit (Lighthouse)" >> scan-summary.txt
          echo "" >> scan-summary.txt
          echo "### 📋 Action Required:" >> scan-summary.txt
          echo "See workflow run #${{ github.run_number }} artifact \`accessibility-evaluation.zip\` for:" >> scan-summary.txt
          echo "- Detailed fix guide (README.md)" >> scan-summary.txt
          echo "- Specific violation reports (axe-report.json)" >> scan-summary.txt
          echo "- Visual issue locations (pa11y-report.html)" >> scan-summary.txt
          echo "- Complete test results for all categories" >> scan-summary.txt
          echo "" >> scan-summary.txt
          echo "@copilot please analyze the accessibility reports and fix these issues." >> scan-summary.txt
          echo "\`\`\`" >> scan-summary.txt

          echo "" >> scan-summary.txt
          echo "## 📈 Detailed Test Results" >> scan-summary.txt
          echo "" >> scan-summary.txt
          echo "- **🚨 Critical WCAG Violations**: $CRITICAL_COUNT (axe-core scan)" >> scan-summary.txt
          echo "- **🏗️ Structural Foundation Issues**: $LIGHTHOUSE_STRUCTURAL (Lighthouse audit)" >> scan-summary.txt
          echo "- **⌨️ Keyboard Navigation Issues**: $KEYBOARD_COUNT (simulation test)" >> scan-summary.txt
          echo "- **🔊 Screen Reader Support Issues**: $SCREENREADER_COUNT (compatibility test)" >> scan-summary.txt
          echo "- **📝 Content & Markup Issues**: $PA11Y_COUNT (pa11y analysis)" >> scan-summary.txt
          echo "- **💯 Lighthouse Accessibility Score**: $LIGHTHOUSE_SCORE%" >> scan-summary.txt
          echo "" >> scan-summary.txt
          echo "**Total Issues Found**: $TOTAL_ISSUES" >> scan-summary.txt

          # Output to workflow summary
          cat scan-summary.txt >> $GITHUB_STEP_SUMMARY
          
          # Also output to console for debugging
          echo "=== DEVELOPER ACTION SUMMARY ==="
          cat scan-summary.txt