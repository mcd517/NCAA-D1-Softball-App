name: Comprehensive Web Accessibility Evaluation

on:
  schedule:
    # Run every Monday at 9:00 AM UTC (weekly)
    - cron: '0 9 * * 1'
  workflow_dispatch: # Allow manual triggering
  
env:
  TARGET_URL: https://ncaa-d1-softball.netlify.app/
  
jobs:
  accessibility-audit:
    runs-on: ubuntu-latest
    name: Comprehensive Accessibility Audit
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Install accessibility testing tools
        run: |
          npm install -g pa11y @axe-core/cli lighthouse
          
      - name: Create reports directory
        run: mkdir -p accessibility-reports
        
      - name: Create pa11y configuration file
        run: |
          cat > pa11y.json << 'EOF'
          {
            "chromeLaunchConfig": {
              "args": [
                "--no-sandbox",
                "--disable-dev-shm-usage",
                "--disable-gpu",
                "--headless"
              ]
            },
            "timeout": 30000,
            "wait": 3000,
            "standard": "WCAG2AA",
            "runners": ["htmlcs"],
            "ignore": [
              "WCAG2AA.Principle1.Guideline1_4.1_4_3.G18.Fail"
            ]
          }
          EOF
          
      - name: Run pa11y accessibility scan (HTML report)
        run: |
          echo "Running pa11y scan for HTML report..."
          echo "DEBUG: pa11y version:"
          pa11y --version
          echo "DEBUG: Target URL: $TARGET_URL"
          pa11y $TARGET_URL --reporter html --config pa11y.json > accessibility-reports/pa11y-report.html || true
          echo "DEBUG: pa11y HTML scan completed, checking file size:"
          ls -la accessibility-reports/pa11y-report.html || echo "HTML report not found"
          
      - name: Run pa11y accessibility scan (JSON report)
        run: |
          echo "Running pa11y scan for JSON report..."
          pa11y $TARGET_URL --reporter json --config pa11y.json > accessibility-reports/pa11y-report.json || true
          echo "DEBUG: pa11y JSON scan completed, checking content:"
          echo "File size: $(wc -c < accessibility-reports/pa11y-report.json 2>/dev/null || echo '0') bytes"
          echo "First few lines of JSON:"
          head -5 accessibility-reports/pa11y-report.json 2>/dev/null || echo "JSON report not found or empty"
          
      - name: Run pa11y accessibility scan (CSV report)
        run: |
          echo "Running pa11y scan for CSV report..."
          pa11y $TARGET_URL --reporter csv --config pa11y.json > accessibility-reports/pa11y-report.csv || true
          echo "DEBUG: pa11y CSV scan completed, checking content:"
          echo "File size: $(wc -c < accessibility-reports/pa11y-report.csv 2>/dev/null || echo '0') bytes"
          echo "CSV content preview:"
          head -3 accessibility-reports/pa11y-report.csv 2>/dev/null || echo "CSV report not found or empty"
          
      - name: Run axe-core accessibility scan
        run: |
          echo "Running axe-core scan..."
          npx axe $TARGET_URL \
            --save accessibility-reports/axe-report.json \
            --timeout 30000 \
            --chrome-options="no-sandbox,disable-dev-shm-usage" || true
            
      - name: Run Lighthouse accessibility audit
        run: |
          echo "Running Lighthouse accessibility audit..."
          lighthouse $TARGET_URL \
            --only-categories=accessibility \
            --output=json \
            --output=html \
            --output-path=accessibility-reports/lighthouse-accessibility \
            --chrome-flags="--headless --no-sandbox --disable-dev-shm-usage" \
            --max-wait-for-load=30000 || true
            
      - name: Generate AI-powered accessibility analysis
        run: |
          echo "# AI-Powered Accessibility Code Analysis" > accessibility-reports/copilot-analysis.md
          echo "" >> accessibility-reports/copilot-analysis.md
          echo "**Analysis Date:** $(date)" >> accessibility-reports/copilot-analysis.md
          echo "**Target Application:** $TARGET_URL" >> accessibility-reports/copilot-analysis.md
          echo "" >> accessibility-reports/copilot-analysis.md
          
          echo "## Code Review Summary" >> accessibility-reports/copilot-analysis.md
          echo "" >> accessibility-reports/copilot-analysis.md
          echo "This analysis complements automated testing by examining:" >> accessibility-reports/copilot-analysis.md
          echo "- Component accessibility patterns" >> accessibility-reports/copilot-analysis.md
          echo "- User experience flows for assistive technology" >> accessibility-reports/copilot-analysis.md
          echo "- Context-aware accessibility implementations" >> accessibility-reports/copilot-analysis.md
          echo "- Cognitive accessibility considerations" >> accessibility-reports/copilot-analysis.md
          echo "" >> accessibility-reports/copilot-analysis.md
          
          # Analyze main components for accessibility patterns
          echo "## Component Analysis" >> accessibility-reports/copilot-analysis.md
          echo "" >> accessibility-reports/copilot-analysis.md
          
          if [ -f "src/App.jsx" ]; then
            echo "### App.jsx - Main Application Structure" >> accessibility-reports/copilot-analysis.md
            echo "\`\`\`" >> accessibility-reports/copilot-analysis.md
            echo "// Key accessibility considerations identified:" >> accessibility-reports/copilot-analysis.md
            
            # Check for semantic structure
            if grep -q "main\|header\|nav\|footer" src/App.jsx; then
              echo "✅ Semantic HTML elements detected" >> accessibility-reports/copilot-analysis.md
            else
              echo "⚠️  Consider adding semantic HTML landmarks (main, header, nav, footer)" >> accessibility-reports/copilot-analysis.md
            fi
            
            # Check for ARIA usage
            if grep -q "aria-\|role=" src/App.jsx; then
              echo "✅ ARIA attributes found - verify implementation" >> accessibility-reports/copilot-analysis.md
            else
              echo "⚠️  Limited ARIA usage detected - consider enhancing for screen readers" >> accessibility-reports/copilot-analysis.md
            fi
            
            # Check for skip links
            if grep -q "skip\|Skip" src/App.jsx; then
              echo "✅ Skip navigation patterns detected" >> accessibility-reports/copilot-analysis.md
            else
              echo "⚠️  Consider adding skip navigation for keyboard users" >> accessibility-reports/copilot-analysis.md
            fi
            
            echo "\`\`\`" >> accessibility-reports/copilot-analysis.md
            echo "" >> accessibility-reports/copilot-analysis.md
          fi
          
          # Analyze key components
          for component in "StatLeaders" "TeamRankings" "TournamentBracket"; do
            if [ -f "src/components/${component}.jsx" ]; then
              echo "### ${component}.jsx - Component Accessibility" >> accessibility-reports/copilot-analysis.md
              echo "\`\`\`" >> accessibility-reports/copilot-analysis.md
              
              # Check for table accessibility
              if grep -q "table\|thead\|tbody\|th\|td" "src/components/${component}.jsx"; then
                if grep -q "scope=\|headers=\|caption" "src/components/${component}.jsx"; then
                  echo "✅ Table accessibility attributes detected" >> accessibility-reports/copilot-analysis.md
                else
                  echo "⚠️  Tables found - ensure proper headers, scope, and captions" >> accessibility-reports/copilot-analysis.md
                fi
              fi
              
              # Check for interactive elements
              if grep -q "button\|onClick\|onKeyDown" "src/components/${component}.jsx"; then
                echo "ℹ️  Interactive elements found - verify keyboard accessibility" >> accessibility-reports/copilot-analysis.md
              fi
              
              # Check for loading states
              if grep -q "loading\|Loading\|isLoading" "src/components/${component}.jsx"; then
                echo "ℹ️  Loading states detected - ensure screen reader announcements" >> accessibility-reports/copilot-analysis.md
              fi
              
              echo "\`\`\`" >> accessibility-reports/copilot-analysis.md
              echo "" >> accessibility-reports/copilot-analysis.md
            fi
          done
          
          echo "## Recommendations for Enhancement" >> accessibility-reports/copilot-analysis.md
          echo "" >> accessibility-reports/copilot-analysis.md
          echo "Based on code analysis, consider implementing:" >> accessibility-reports/copilot-analysis.md
          echo "" >> accessibility-reports/copilot-analysis.md
          echo "### High Priority" >> accessibility-reports/copilot-analysis.md
          echo "- Add \`<main>\` landmark if missing (detected by axe-core)" >> accessibility-reports/copilot-analysis.md
          echo "- Implement h1 heading structure (detected by axe-core)" >> accessibility-reports/copilot-analysis.md
          echo "- Ensure all content is within semantic landmarks" >> accessibility-reports/copilot-analysis.md
          echo "" >> accessibility-reports/copilot-analysis.md
          echo "### Medium Priority" >> accessibility-reports/copilot-analysis.md
          echo "- Enhance keyboard navigation patterns" >> accessibility-reports/copilot-analysis.md
          echo "- Add skip links for main content areas" >> accessibility-reports/copilot-analysis.md
          echo "- Implement proper focus management for dynamic content" >> accessibility-reports/copilot-analysis.md
          echo "" >> accessibility-reports/copilot-analysis.md
          echo "### Low Priority" >> accessibility-reports/copilot-analysis.md
          echo "- Add descriptive alt text for decorative images" >> accessibility-reports/copilot-analysis.md
          echo "- Enhance ARIA descriptions for complex interactions" >> accessibility-reports/copilot-analysis.md
          echo "- Consider implementing reduced motion preferences" >> accessibility-reports/copilot-analysis.md
          echo "" >> accessibility-reports/copilot-analysis.md
          
          echo "## Integration with Automated Results" >> accessibility-reports/copilot-analysis.md
          echo "" >> accessibility-reports/copilot-analysis.md
          echo "This analysis should be reviewed alongside:" >> accessibility-reports/copilot-analysis.md
          echo "- axe-core violations for WCAG compliance" >> accessibility-reports/copilot-analysis.md
          echo "- pa11y HTML_CodeSniffer results" >> accessibility-reports/copilot-analysis.md
          echo "- Lighthouse accessibility score and recommendations" >> accessibility-reports/copilot-analysis.md
          echo "" >> accessibility-reports/copilot-analysis.md
          echo "*Note: This analysis uses pattern matching and heuristics. Manual review with assistive technology is still recommended.*" >> accessibility-reports/copilot-analysis.md

      - name: Generate comprehensive summary report
        run: |
          echo "# Web Accessibility Evaluation Report" > accessibility-reports/README.md
          echo "" >> accessibility-reports/README.md
          echo "**Scan Date:** $(date)" >> accessibility-reports/README.md
          echo "**Target URL:** $TARGET_URL" >> accessibility-reports/README.md
          echo "**Standards:** WCAG 2.1 AA" >> accessibility-reports/README.md
          echo "**Tools Used:** pa11y, axe-core, Lighthouse" >> accessibility-reports/README.md
          echo "" >> accessibility-reports/README.md
          
          echo "## Executive Summary" >> accessibility-reports/README.md
          echo "" >> accessibility-reports/README.md
          
          # Initialize counters
          TOTAL_ISSUES=0
          PA11Y_COUNT=0
          AXE_COUNT=0
          LIGHTHOUSE_SCORE="N/A"
          
          # Count pa11y issues
          if [ -f accessibility-reports/pa11y-report.json ]; then
            PA11Y_COUNT=$(cat accessibility-reports/pa11y-report.json | jq '. | length' 2>/dev/null || echo "0")
            echo "- **pa11y Issues:** $PA11Y_COUNT" >> accessibility-reports/README.md
            TOTAL_ISSUES=$((TOTAL_ISSUES + PA11Y_COUNT))
          else
            echo "- **pa11y Issues:** Report not generated" >> accessibility-reports/README.md
          fi
          
          # Count axe-core issues
          if [ -f accessibility-reports/axe-report.json ]; then
            AXE_COUNT=$(cat accessibility-reports/axe-report.json | jq '.violations | length' 2>/dev/null || echo "0")
            echo "- **axe-core Violations:** $AXE_COUNT" >> accessibility-reports/README.md
            TOTAL_ISSUES=$((TOTAL_ISSUES + AXE_COUNT))
          else
            echo "- **axe-core Violations:** Report not generated" >> accessibility-reports/README.md
          fi
          
          # Extract Lighthouse accessibility score
          if [ -f accessibility-reports/lighthouse-accessibility.report.json ]; then
            LIGHTHOUSE_SCORE=$(cat accessibility-reports/lighthouse-accessibility.report.json | jq '.categories.accessibility.score * 100' 2>/dev/null || echo "N/A")
            echo "- **Lighthouse Accessibility Score:** $LIGHTHOUSE_SCORE%" >> accessibility-reports/README.md
          else
            echo "- **Lighthouse Accessibility Score:** Report not generated" >> accessibility-reports/README.md
          fi
          
          echo "" >> accessibility-reports/README.md
          echo "**Total Issues Found:** $TOTAL_ISSUES" >> accessibility-reports/README.md
          echo "" >> accessibility-reports/README.md
          
          # Add status indicator
          if [ "$TOTAL_ISSUES" -eq "0" ]; then
            echo "✅ **Status:** No accessibility issues detected!" >> accessibility-reports/README.md
          elif [ "$TOTAL_ISSUES" -le "5" ]; then
            echo "⚠️ **Status:** Minor accessibility issues found" >> accessibility-reports/README.md
          else
            echo "❌ **Status:** Significant accessibility issues found" >> accessibility-reports/README.md
          fi
          
          echo "" >> accessibility-reports/README.md
          echo "## Detailed Reports" >> accessibility-reports/README.md
          echo "" >> accessibility-reports/README.md
          echo "### pa11y Reports" >> accessibility-reports/README.md
          echo "- **HTML Report:** \`pa11y-report.html\` - Visual report with highlighted issues" >> accessibility-reports/README.md
          echo "- **JSON Report:** \`pa11y-report.json\` - Machine-readable data for integration" >> accessibility-reports/README.md
          echo "- **CSV Report:** \`pa11y-report.csv\` - Spreadsheet-compatible format" >> accessibility-reports/README.md
          echo "" >> accessibility-reports/README.md
          echo "### axe-core Reports" >> accessibility-reports/README.md
          echo "- **JSON Report:** \`axe-report.json\` - Detailed violation analysis" >> accessibility-reports/README.md
          echo "" >> accessibility-reports/README.md
          echo "### Lighthouse Reports" >> accessibility-reports/README.md
          echo "- **HTML Report:** \`lighthouse-accessibility.report.html\` - Interactive accessibility audit" >> accessibility-reports/README.md
          echo "- **JSON Report:** \`lighthouse-accessibility.report.json\` - Raw audit data" >> accessibility-reports/README.md
          echo "" >> accessibility-reports/README.md
          echo "## About the Tools" >> accessibility-reports/README.md
          echo "" >> accessibility-reports/README.md
          echo "- **pa11y:** Command-line accessibility testing using HTML_CodeSniffer" >> accessibility-reports/README.md
          echo "- **axe-core:** Industry-standard accessibility testing engine" >> accessibility-reports/README.md
          echo "- **Lighthouse:** Google's web quality auditing tool with accessibility focus" >> accessibility-reports/README.md
          echo "" >> accessibility-reports/README.md
          echo "## Implementation Notes" >> accessibility-reports/README.md
          echo "" >> accessibility-reports/README.md
          echo "This automated scan provides a baseline accessibility assessment following WCAG 2.1 AA guidelines." >> accessibility-reports/README.md
          echo "Manual testing and expert review are also recommended for comprehensive accessibility compliance." >> accessibility-reports/README.md
          echo "Color contrast issues are ignored in pa11y scans as they often produce false positives in automated testing." >> accessibility-reports/README.md
          
      - name: List generated reports
        run: |
          echo "Generated accessibility reports:"
          ls -la accessibility-reports/
          
      - name: Upload accessibility reports
        uses: actions/upload-artifact@v4
        with:
          name: accessibility-evaluation-${{ github.run_number }}
          path: accessibility-reports/
          retention-days: 90
          
      - name: Create workflow summary
        if: always()
        run: |
          echo "# 🔍 Accessibility Scan Results" > scan-summary.txt
          echo "" >> scan-summary.txt
          echo "**Scan completed:** $(date)" >> scan-summary.txt
          echo "**Target URL:** $TARGET_URL" >> scan-summary.txt
          echo "**Workflow Run:** ${{ github.run_number }}" >> scan-summary.txt
          echo "" >> scan-summary.txt
          
          TOTAL_ISSUES=0
          
          # Check pa11y results
          if [ -f accessibility-reports/pa11y-report.json ]; then
            PA11Y_COUNT=$(cat accessibility-reports/pa11y-report.json | jq '. | length' 2>/dev/null || echo "0")
            echo "📋 **pa11y Issues:** $PA11Y_COUNT" >> scan-summary.txt
            TOTAL_ISSUES=$((TOTAL_ISSUES + PA11Y_COUNT))
          else
            echo "📋 **pa11y Issues:** Report generation failed" >> scan-summary.txt
          fi
          
          # Check axe-core results with debugging
          if [ -f accessibility-reports/axe-report.json ]; then
            echo "DEBUG: axe-report.json exists, checking structure..."
            # Check if it's an array or object with violations property
            AXE_COUNT=$(cat accessibility-reports/axe-report.json | jq -r 'if type == "array" then .[0].violations | length else .violations | length end' 2>/dev/null || echo "0")
            
            # If still 0, try alternative structures
            if [ "$AXE_COUNT" = "0" ]; then
              AXE_COUNT=$(cat accessibility-reports/axe-report.json | jq -r 'if has("testResults") then .testResults[0].violations | length else empty end' 2>/dev/null || echo "0")
            fi
            
            # If still 0, try to count any violation-like objects
            if [ "$AXE_COUNT" = "0" ]; then
              AXE_COUNT=$(cat accessibility-reports/axe-report.json | jq -r '[.. | objects | select(has("id") and has("impact") and has("nodes"))] | length' 2>/dev/null || echo "0")
            fi
            
            echo "🔧 **axe-core Violations:** $AXE_COUNT" >> scan-summary.txt
            TOTAL_ISSUES=$((TOTAL_ISSUES + AXE_COUNT))
          else
            echo "🔧 **axe-core Violations:** Report generation failed" >> scan-summary.txt
          fi
          
          # Check Lighthouse results
          if [ -f accessibility-reports/lighthouse-accessibility.report.json ]; then
            LIGHTHOUSE_SCORE=$(cat accessibility-reports/lighthouse-accessibility.report.json | jq '.categories.accessibility.score * 100' 2>/dev/null || echo "0")
            
            # Debug Lighthouse accessibility audits
            echo "DEBUG: Lighthouse accessibility details:"
            FAILED_AUDITS=$(cat accessibility-reports/lighthouse-accessibility.report.json | jq -r '.audits | to_entries[] | select(.value.score != null and .value.score < 1) | .key' 2>/dev/null | wc -l || echo "0")
            echo "DEBUG: Lighthouse failed audits count: $FAILED_AUDITS"
            
            # List some specific failed audits for debugging
            if [ "$FAILED_AUDITS" -gt "0" ]; then
              echo "DEBUG: Some failed Lighthouse audits:"
              cat accessibility-reports/lighthouse-accessibility.report.json | jq -r '.audits | to_entries[] | select(.value.score != null and .value.score < 1) | "\(.key): \(.value.title)"' 2>/dev/null | head -5 || true
            fi
            
            echo "💡 **Lighthouse Score:** $LIGHTHOUSE_SCORE%" >> scan-summary.txt
          else
            echo "💡 **Lighthouse Score:** Report generation failed" >> scan-summary.txt
          fi
          
          echo "" >> scan-summary.txt
          echo "**Total Issues Found:** $TOTAL_ISSUES" >> scan-summary.txt
          echo "" >> scan-summary.txt
          
          # Final status
          if [ "$TOTAL_ISSUES" -eq "0" ]; then
            echo "✅ **Result:** No accessibility issues detected!" >> scan-summary.txt
          else
            echo "⚠️ **Result:** $TOTAL_ISSUES accessibility issues found. Review detailed reports." >> scan-summary.txt
          fi
          
          echo "" >> scan-summary.txt
          echo "📊 **Download Reports:** Check the 'Artifacts' section below for detailed reports." >> scan-summary.txt
          echo "🔗 **Report Archive:** \`accessibility-evaluation-${{ github.run_number }}.zip\`" >> scan-summary.txt
          
          # Output to workflow summary
          cat scan-summary.txt >> $GITHUB_STEP_SUMMARY
          
          # Also output to console
          echo "=== ACCESSIBILITY SCAN SUMMARY ==="
          cat scan-summary.txt