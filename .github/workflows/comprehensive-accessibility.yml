name: Comprehensive Web Accessibility Evaluation

on:
  schedule:
    # Run every Monday at 9:00 AM UTC (weekly)
    - cron: '0 9 * * 1'
  workflow_dispatch: # Allow manual triggering
  
env:
  TARGET_URL: https://ncaa-d1-softball.netlify.app/
  
jobs:
  accessibility-audit:
    runs-on: ubuntu-latest
    name: Comprehensive Accessibility Audit
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Install accessibility testing tools
        run: |
          npm install -g pa11y @axe-core/cli lighthouse
          
      - name: Create reports directory
        run: mkdir -p accessibility-reports
        
      - name: Create pa11y configuration file
        run: |
          cat > pa11y.json << 'EOF'
          {
            "chromeLaunchConfig": {
              "args": [
                "--no-sandbox",
                "--disable-dev-shm-usage",
                "--disable-gpu",
                "--headless"
              ]
            },
            "timeout": 30000,
            "wait": 3000,
            "standard": "WCAG2AA",
            "runners": ["htmlcs"],
            "ignore": [
              "WCAG2AA.Principle1.Guideline1_4.1_4_3.G18.Fail"
            ]
          }
          EOF
          
      - name: Run pa11y accessibility scan (HTML report)
        run: |
          echo "Running pa11y scan for HTML report..."
          echo "DEBUG: pa11y version:"
          pa11y --version
          echo "DEBUG: Target URL: $TARGET_URL"
          pa11y $TARGET_URL --reporter html --config pa11y.json > accessibility-reports/pa11y-report.html || true
          echo "DEBUG: pa11y HTML scan completed, checking file size:"
          ls -la accessibility-reports/pa11y-report.html || echo "HTML report not found"
          
      - name: Run pa11y accessibility scan (JSON report)
        run: |
          echo "Running pa11y scan for JSON report..."
          pa11y $TARGET_URL --reporter json --config pa11y.json --include-warnings --include-notices > accessibility-reports/pa11y-report.json || true
          echo "DEBUG: pa11y JSON scan completed, checking content:"
          echo "File size: $(wc -c < accessibility-reports/pa11y-report.json 2>/dev/null || echo '0') bytes"
          echo "First few lines of JSON:"
          head -5 accessibility-reports/pa11y-report.json 2>/dev/null || echo "JSON report not found or empty"
          
      - name: Run pa11y accessibility scan (CSV report)
        run: |
          echo "Running pa11y scan for CSV report..."
          pa11y $TARGET_URL --reporter csv --config pa11y.json --include-warnings --include-notices > accessibility-reports/pa11y-report.csv || true
          echo "DEBUG: pa11y CSV scan completed, checking content:"
          echo "File size: $(wc -c < accessibility-reports/pa11y-report.csv 2>/dev/null || echo '0') bytes"
          echo "CSV content preview:"
          head -3 accessibility-reports/pa11y-report.csv 2>/dev/null || echo "CSV report not found or empty"
          
      - name: Run axe-core accessibility scan
        run: |
          echo "Running axe-core scan..."
          npx axe $TARGET_URL \
            --save accessibility-reports/axe-report.json \
            --timeout 30000 \
            --chrome-options="no-sandbox,disable-dev-shm-usage" || true
            
      - name: Run Lighthouse accessibility audit
        run: |
          echo "Running Lighthouse accessibility audit..."
          lighthouse $TARGET_URL \
            --only-categories=accessibility \
            --output=json \
            --output=html \
            --output-path=accessibility-reports/lighthouse-accessibility \
            --chrome-flags="--headless --no-sandbox --disable-dev-shm-usage" \
            --max-wait-for-load=30000 || true
            
      - name: Generate AI-powered accessibility analysis
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: |
          echo "# AI-Powered Accessibility Code Analysis" > accessibility-reports/copilot-analysis.md
          echo "" >> accessibility-reports/copilot-analysis.md
          echo "**Analysis Date:** $(date)" >> accessibility-reports/copilot-analysis.md
          echo "**Target Application:** $TARGET_URL" >> accessibility-reports/copilot-analysis.md
          echo "**AI Model:** GPT-4 Accessibility Expert" >> accessibility-reports/copilot-analysis.md
          echo "" >> accessibility-reports/copilot-analysis.md
          
          # Create a script to analyze code with AI
          cat > analyze_accessibility.cjs << 'EOF'
          const fs = require('fs');
          const https = require('https');
          
          async function analyzeAccessibility() {
            if (!process.env.OPENAI_API_KEY) {
              console.log("⚠️ OpenAI API key not configured - using pattern-based analysis");
              return false;
            }
            
            try {
              // Read main application files
              const appContent = fs.readFileSync('src/App.jsx', 'utf8');
              const components = ['StatLeaders', 'TeamRankings', 'TournamentBracket', 'Scoreboard'].map(name => {
                try {
                  return {
                    name,
                    content: fs.readFileSync(`src/components/${name}.jsx`, 'utf8')
                  };
                } catch {
                  return null;
                }
              }).filter(Boolean);
              
              const prompt = `As an accessibility expert, analyze this React application for WCAG 2.1 AA compliance issues and provide specific recommendations:

          Main App Component:
          \`\`\`jsx
          ${appContent}
          \`\`\`

          ${components.map(c => `${c.name} Component:
          \`\`\`jsx
          ${c.content}
          \`\`\``).join('\n\n')}

          Focus on:
          1. Semantic HTML structure and landmarks
          2. Heading hierarchy and navigation
          3. ARIA attributes and roles
          4. Keyboard navigation support
          5. Screen reader compatibility
          6. Color contrast and visual accessibility
          7. Interactive element accessibility

          Provide specific, actionable recommendations with code examples where helpful.`;

              const data = JSON.stringify({
                model: "gpt-4",
                messages: [{
                  role: "system",
                  content: "You are an expert web accessibility consultant specializing in WCAG 2.1 AA compliance. Provide detailed, technical analysis with specific code improvements."
                }, {
                  role: "user",
                  content: prompt
                }],
                max_tokens: 2000,
                temperature: 0.3
              });

              const options = {
                hostname: 'api.openai.com',
                port: 443,
                path: '/v1/chat/completions',
                method: 'POST',
                headers: {
                  'Content-Type': 'application/json',
                  'Authorization': `Bearer ${process.env.OPENAI_API_KEY}`,
                  'Content-Length': data.length
                }
              };

              return new Promise((resolve, reject) => {
                const req = https.request(options, (res) => {
                  let responseData = '';
                  res.on('data', (chunk) => {
                    responseData += chunk;
                  });
                  res.on('end', () => {
                    try {
                      const response = JSON.parse(responseData);
                      if (response.choices && response.choices[0]) {
                        fs.writeFileSync('ai-analysis.md', response.choices[0].message.content);
                        console.log("✅ AI accessibility analysis completed");
                        resolve(true);
                      } else {
                        console.log("⚠️ Unexpected API response format");
                        resolve(false);
                      }
                    } catch (error) {
                      console.log("⚠️ Error parsing API response:", error.message);
                      resolve(false);
                    }
                  });
                });

                req.on('error', (error) => {
                  console.log("⚠️ API request failed:", error.message);
                  resolve(false);
                });

                req.write(data);
                req.end();
              });
            } catch (error) {
              console.log("⚠️ Error in AI analysis:", error.message);
              return false;
            }
          }
          
          analyzeAccessibility();
          EOF
          
          # Run AI analysis
          node analyze_accessibility.cjs
          
          # Append AI analysis if successful
          if [ -f "ai-analysis.md" ]; then
            echo "## 🤖 AI Accessibility Expert Analysis" >> accessibility-reports/copilot-analysis.md
            echo "" >> accessibility-reports/copilot-analysis.md
            cat ai-analysis.md >> accessibility-reports/copilot-analysis.md
            echo "" >> accessibility-reports/copilot-analysis.md
          else
            echo "## 🤖 Pattern-Based Analysis (AI analysis unavailable)" >> accessibility-reports/copilot-analysis.md
            echo "" >> accessibility-reports/copilot-analysis.md
            echo "AI analysis requires OpenAI API key configuration. Using pattern-based analysis instead." >> accessibility-reports/copilot-analysis.md
            echo "" >> accessibility-reports/copilot-analysis.md
          fi
          
      - name: Generate comprehensive summary report
        run: |
          echo "# Web Accessibility Evaluation Report" > accessibility-reports/README.md
          echo "" >> accessibility-reports/README.md
          echo "**Scan Date:** $(date)" >> accessibility-reports/README.md
          echo "**Target URL:** $TARGET_URL" >> accessibility-reports/README.md
          echo "**Standards:** WCAG 2.1 AA" >> accessibility-reports/README.md
          echo "**Tools Used:** pa11y, axe-core, Lighthouse" >> accessibility-reports/README.md
          echo "" >> accessibility-reports/README.md
          
          echo "## Executive Summary" >> accessibility-reports/README.md
          echo "" >> accessibility-reports/README.md
          
          # Initialize counters
          TOTAL_ISSUES=0
          PA11Y_COUNT=0
          AXE_COUNT=0
          LIGHTHOUSE_SCORE="N/A"
          
          # Count pa11y issues
          if [ -f accessibility-reports/pa11y-report.json ]; then
            PA11Y_COUNT=$(cat accessibility-reports/pa11y-report.json | jq '. | length' 2>/dev/null || echo "0")
            echo "- **pa11y Issues:** $PA11Y_COUNT" >> accessibility-reports/README.md
            TOTAL_ISSUES=$((TOTAL_ISSUES + PA11Y_COUNT))
          else
            echo "- **pa11y Issues:** Report not generated" >> accessibility-reports/README.md
          fi
          
          # Count axe-core issues
          if [ -f accessibility-reports/axe-report.json ]; then
            AXE_COUNT=$(cat accessibility-reports/axe-report.json | jq '.violations | length' 2>/dev/null || echo "0")
            echo "- **axe-core Violations:** $AXE_COUNT" >> accessibility-reports/README.md
            TOTAL_ISSUES=$((TOTAL_ISSUES + AXE_COUNT))
          else
            echo "- **axe-core Violations:** Report not generated" >> accessibility-reports/README.md
          fi
          
          # Extract Lighthouse accessibility score
          if [ -f accessibility-reports/lighthouse-accessibility.report.json ]; then
            LIGHTHOUSE_SCORE=$(cat accessibility-reports/lighthouse-accessibility.report.json | jq '.categories.accessibility.score * 100' 2>/dev/null || echo "N/A")
            echo "- **Lighthouse Accessibility Score:** $LIGHTHOUSE_SCORE%" >> accessibility-reports/README.md
          else
            echo "- **Lighthouse Accessibility Score:** Report not generated" >> accessibility-reports/README.md
          fi
          
          echo "" >> accessibility-reports/README.md
          echo "**Total Issues Found:** $TOTAL_ISSUES" >> accessibility-reports/README.md
          echo "" >> accessibility-reports/README.md
          
          # Add status indicator
          if [ "$TOTAL_ISSUES" -eq "0" ]; then
            echo "✅ **Status:** No accessibility issues detected!" >> accessibility-reports/README.md
          elif [ "$TOTAL_ISSUES" -le "5" ]; then
            echo "⚠️ **Status:** Minor accessibility issues found" >> accessibility-reports/README.md
          else
            echo "❌ **Status:** Significant accessibility issues found" >> accessibility-reports/README.md
          fi
          
          echo "" >> accessibility-reports/README.md
          echo "## Detailed Reports" >> accessibility-reports/README.md
          echo "" >> accessibility-reports/README.md
          echo "### pa11y Reports" >> accessibility-reports/README.md
          echo "- **HTML Report:** \`pa11y-report.html\` - Visual report with highlighted issues" >> accessibility-reports/README.md
          echo "- **JSON Report:** \`pa11y-report.json\` - Machine-readable data for integration" >> accessibility-reports/README.md
          echo "- **CSV Report:** \`pa11y-report.csv\` - Spreadsheet-compatible format" >> accessibility-reports/README.md
          echo "" >> accessibility-reports/README.md
          echo "### axe-core Reports" >> accessibility-reports/README.md
          echo "- **JSON Report:** \`axe-report.json\` - Detailed violation analysis" >> accessibility-reports/README.md
          echo "" >> accessibility-reports/README.md
          echo "### Lighthouse Reports" >> accessibility-reports/README.md
          echo "- **HTML Report:** \`lighthouse-accessibility.report.html\` - Interactive accessibility audit" >> accessibility-reports/README.md
          echo "- **JSON Report:** \`lighthouse-accessibility.report.json\` - Raw audit data" >> accessibility-reports/README.md
          echo "" >> accessibility-reports/README.md
          echo "## About the Tools" >> accessibility-reports/README.md
          echo "" >> accessibility-reports/README.md
          echo "- **pa11y:** Command-line accessibility testing using HTML_CodeSniffer" >> accessibility-reports/README.md
          echo "- **axe-core:** Industry-standard accessibility testing engine" >> accessibility-reports/README.md
          echo "- **Lighthouse:** Google's web quality auditing tool with accessibility focus" >> accessibility-reports/README.md
          echo "" >> accessibility-reports/README.md
          echo "## Implementation Notes" >> accessibility-reports/README.md
          echo "" >> accessibility-reports/README.md
          echo "This automated scan provides a baseline accessibility assessment following WCAG 2.1 AA guidelines." >> accessibility-reports/README.md
          echo "Manual testing and expert review are also recommended for comprehensive accessibility compliance." >> accessibility-reports/README.md
          echo "Color contrast issues are ignored in pa11y scans as they often produce false positives in automated testing." >> accessibility-reports/README.md
          
      - name: List generated reports
        run: |
          echo "Generated accessibility reports:"
          ls -la accessibility-reports/
          
      - name: Upload accessibility reports
        uses: actions/upload-artifact@v4
        with:
          name: accessibility-evaluation-${{ github.run_number }}
          path: accessibility-reports/
          retention-days: 90
          
      - name: Create workflow summary
        if: always()
        run: |
          echo "# 🔍 Accessibility Scan Results" > scan-summary.txt
          echo "" >> scan-summary.txt
          echo "**Scan completed:** $(date)" >> scan-summary.txt
          echo "**Target URL:** $TARGET_URL" >> scan-summary.txt
          echo "**Workflow Run:** ${{ github.run_number }}" >> scan-summary.txt
          echo "" >> scan-summary.txt
          
          TOTAL_ISSUES=0
          
          # Check pa11y results
          if [ -f accessibility-reports/pa11y-report.json ]; then
            PA11Y_COUNT=$(cat accessibility-reports/pa11y-report.json | jq '. | length' 2>/dev/null || echo "0")
            echo "📋 **pa11y Issues:** $PA11Y_COUNT" >> scan-summary.txt
            TOTAL_ISSUES=$((TOTAL_ISSUES + PA11Y_COUNT))
          else
            echo "📋 **pa11y Issues:** Report generation failed" >> scan-summary.txt
          fi
          
          # Check axe-core results with debugging
          if [ -f accessibility-reports/axe-report.json ]; then
            echo "DEBUG: axe-report.json exists, checking structure..."
            # Check if it's an array or object with violations property
            AXE_COUNT=$(cat accessibility-reports/axe-report.json | jq -r 'if type == "array" then .[0].violations | length else .violations | length end' 2>/dev/null || echo "0")
            
            # If still 0, try alternative structures
            if [ "$AXE_COUNT" = "0" ]; then
              AXE_COUNT=$(cat accessibility-reports/axe-report.json | jq -r 'if has("testResults") then .testResults[0].violations | length else empty end' 2>/dev/null || echo "0")
            fi
            
            # If still 0, try to count any violation-like objects
            if [ "$AXE_COUNT" = "0" ]; then
              AXE_COUNT=$(cat accessibility-reports/axe-report.json | jq -r '[.. | objects | select(has("id") and has("impact") and has("nodes"))] | length' 2>/dev/null || echo "0")
            fi
            
            echo "🔧 **axe-core Violations:** $AXE_COUNT" >> scan-summary.txt
            TOTAL_ISSUES=$((TOTAL_ISSUES + AXE_COUNT))
          else
            echo "🔧 **axe-core Violations:** Report generation failed" >> scan-summary.txt
          fi
          
          # Check Lighthouse results
          if [ -f accessibility-reports/lighthouse-accessibility.report.json ]; then
            LIGHTHOUSE_SCORE=$(cat accessibility-reports/lighthouse-accessibility.report.json | jq '.categories.accessibility.score * 100' 2>/dev/null || echo "0")
            
            # Check for hidden audits that might have failed
            echo "DEBUG: Checking Lighthouse hidden audits..."
            LIGHTHOUSE_HIDDEN_FAILURES=$(cat accessibility-reports/lighthouse-accessibility.report.json | jq -r '.audits | to_entries[] | select(.value.score == 0 and .value.scoreDisplayMode == "binary") | .key' 2>/dev/null | wc -l || echo "0")
            echo "DEBUG: Lighthouse hidden failures: $LIGHTHOUSE_HIDDEN_FAILURES"
            
            # List specific hidden failures
            if [ "$LIGHTHOUSE_HIDDEN_FAILURES" -gt "0" ]; then
              echo "DEBUG: Lighthouse hidden audit failures:"
              cat accessibility-reports/lighthouse-accessibility.report.json | jq -r '.audits | to_entries[] | select(.value.score == 0 and .value.scoreDisplayMode == "binary") | "\(.key): \(.value.title)"' 2>/dev/null | head -5 || true
            fi
            
            # Debug Lighthouse accessibility audits
            echo "DEBUG: Lighthouse accessibility details:"
            FAILED_AUDITS=$(cat accessibility-reports/lighthouse-accessibility.report.json | jq -r '.audits | to_entries[] | select(.value.score != null and .value.score < 1) | .key' 2>/dev/null | wc -l || echo "0")
            echo "DEBUG: Lighthouse failed audits count: $FAILED_AUDITS"
            
            # List some specific failed audits for debugging
            if [ "$FAILED_AUDITS" -gt "0" ]; then
              echo "DEBUG: Some failed Lighthouse audits:"
              cat accessibility-reports/lighthouse-accessibility.report.json | jq -r '.audits | to_entries[] | select(.value.score != null and .value.score < 1) | "\(.key): \(.value.title)"' 2>/dev/null | head -5 || true
            fi
            
            echo "💡 **Lighthouse Score:** $LIGHTHOUSE_SCORE%" >> scan-summary.txt
            echo "💡 **Lighthouse Hidden Issues:** $LIGHTHOUSE_HIDDEN_FAILURES" >> scan-summary.txt
            
            # Add Lighthouse interpretation
            if [ "$LIGHTHOUSE_SCORE" = "100" ] && [ "$LIGHTHOUSE_HIDDEN_FAILURES" -gt "0" ]; then
              echo "⚠️ **Note:** Lighthouse's 100% score excludes $LIGHTHOUSE_HIDDEN_FAILURES structural violations that don't affect its weighted scoring algorithm" >> scan-summary.txt
            fi
          else
            echo "💡 **Lighthouse Score:** Report generation failed" >> scan-summary.txt
          fi
          
          echo "" >> scan-summary.txt
          echo "**Total Issues Found:** $TOTAL_ISSUES" >> scan-summary.txt
          echo "" >> scan-summary.txt
          
          # Final status
          if [ "$TOTAL_ISSUES" -eq "0" ]; then
            echo "✅ **Result:** No accessibility issues detected!" >> scan-summary.txt
          else
            echo "⚠️ **Result:** $TOTAL_ISSUES accessibility issues found. Review detailed reports." >> scan-summary.txt
          fi
          
          echo "" >> scan-summary.txt
          echo "📊 **Download Reports:** Check the 'Artifacts' section below for detailed reports." >> scan-summary.txt
          echo "🔗 **Report Archive:** \`accessibility-evaluation-${{ github.run_number }}.zip\`" >> scan-summary.txt
          
          # Output to workflow summary
          cat scan-summary.txt >> $GITHUB_STEP_SUMMARY
          
          # Also output to console
          echo "=== ACCESSIBILITY SCAN SUMMARY ==="
          cat scan-summary.txt